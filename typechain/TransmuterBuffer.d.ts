/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface TransmuterBufferInterface extends ethers.utils.Interface {
  functions: {
    "ADMIN()": FunctionFragment;
    "DEFAULT_ADMIN_ROLE()": FunctionFragment;
    "KEEPER()": FunctionFragment;
    "_yieldTokens(address,uint256)": FunctionFragment;
    "alchemist()": FunctionFragment;
    "burnCredit()": FunctionFragment;
    "currentExchanged(address)": FunctionFragment;
    "debtToken()": FunctionFragment;
    "depositFunds(address,uint256)": FunctionFragment;
    "exchange(address)": FunctionFragment;
    "flowAvailable(address)": FunctionFragment;
    "flowRate(address)": FunctionFragment;
    "getAvailableFlow(address)": FunctionFragment;
    "getRoleAdmin(bytes32)": FunctionFragment;
    "getTotalCredit()": FunctionFragment;
    "getTotalUnderlyingBuffered(address)": FunctionFragment;
    "getWeight(address,address)": FunctionFragment;
    "grantRole(bytes32,address)": FunctionFragment;
    "hasRole(bytes32,address)": FunctionFragment;
    "initialize(address,address)": FunctionFragment;
    "lastFlowrateUpdate(address)": FunctionFragment;
    "onERC20Received(address,uint256)": FunctionFragment;
    "refreshStrategies()": FunctionFragment;
    "registerAsset(address,address)": FunctionFragment;
    "registeredUnderlyings(uint256)": FunctionFragment;
    "renounceRole(bytes32,address)": FunctionFragment;
    "revokeRole(bytes32,address)": FunctionFragment;
    "setAlchemist(address)": FunctionFragment;
    "setFlowRate(address,uint256)": FunctionFragment;
    "setSource(address,bool)": FunctionFragment;
    "setWeights(address,address[],uint256[])": FunctionFragment;
    "sources(address)": FunctionFragment;
    "supportsInterface(bytes4)": FunctionFragment;
    "transmuter(address)": FunctionFragment;
    "version()": FunctionFragment;
    "weightings(address)": FunctionFragment;
    "withdraw(address,uint256,address)": FunctionFragment;
    "withdrawFromAlchemist(address,uint256,uint256)": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "ADMIN", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "KEEPER", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "_yieldTokens",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "alchemist", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "burnCredit",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "currentExchanged",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "debtToken", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "depositFunds",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "exchange", values: [string]): string;
  encodeFunctionData(
    functionFragment: "flowAvailable",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "flowRate", values: [string]): string;
  encodeFunctionData(
    functionFragment: "getAvailableFlow",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getRoleAdmin",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getTotalCredit",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getTotalUnderlyingBuffered",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getWeight",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "grantRole",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "hasRole",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "lastFlowrateUpdate",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "onERC20Received",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "refreshStrategies",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "registerAsset",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "registeredUnderlyings",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceRole",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "revokeRole",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "setAlchemist",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setFlowRate",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setSource",
    values: [string, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setWeights",
    values: [string, string[], BigNumberish[]]
  ): string;
  encodeFunctionData(functionFragment: "sources", values: [string]): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "transmuter", values: [string]): string;
  encodeFunctionData(functionFragment: "version", values?: undefined): string;
  encodeFunctionData(functionFragment: "weightings", values: [string]): string;
  encodeFunctionData(
    functionFragment: "withdraw",
    values: [string, BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawFromAlchemist",
    values: [string, BigNumberish, BigNumberish]
  ): string;

  decodeFunctionResult(functionFragment: "ADMIN", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "KEEPER", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "_yieldTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "alchemist", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "burnCredit", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "currentExchanged",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "debtToken", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "depositFunds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "exchange", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "flowAvailable",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "flowRate", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getAvailableFlow",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRoleAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTotalCredit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTotalUnderlyingBuffered",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getWeight", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "grantRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "hasRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "lastFlowrateUpdate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "onERC20Received",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "refreshStrategies",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "registerAsset",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "registeredUnderlyings",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceRole",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "revokeRole", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setAlchemist",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setFlowRate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setSource", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setWeights", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "sources", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "transmuter", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "version", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "weightings", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "withdrawFromAlchemist",
    data: BytesLike
  ): Result;

  events: {
    "RefreshStrategies()": EventFragment;
    "RegisterAsset(address,address)": EventFragment;
    "RoleAdminChanged(bytes32,bytes32,bytes32)": EventFragment;
    "RoleGranted(bytes32,address,address)": EventFragment;
    "RoleRevoked(bytes32,address,address)": EventFragment;
    "SetAlchemist(address)": EventFragment;
    "SetFlowRate(address,uint256)": EventFragment;
    "SetSource(address,bool)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "RefreshStrategies"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RegisterAsset"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoleAdminChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoleGranted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoleRevoked"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetAlchemist"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetFlowRate"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetSource"): EventFragment;
}

export type RefreshStrategiesEvent = TypedEvent<[] & {}>;

export type RegisterAssetEvent = TypedEvent<
  [string, string] & { underlyingToken: string; transmuter: string }
>;

export type RoleAdminChangedEvent = TypedEvent<
  [string, string, string] & {
    role: string;
    previousAdminRole: string;
    newAdminRole: string;
  }
>;

export type RoleGrantedEvent = TypedEvent<
  [string, string, string] & { role: string; account: string; sender: string }
>;

export type RoleRevokedEvent = TypedEvent<
  [string, string, string] & { role: string; account: string; sender: string }
>;

export type SetAlchemistEvent = TypedEvent<[string] & { alchemist: string }>;

export type SetFlowRateEvent = TypedEvent<
  [string, BigNumber] & { underlyingToken: string; flowRate: BigNumber }
>;

export type SetSourceEvent = TypedEvent<
  [string, boolean] & { source: string; flag: boolean }
>;

export class TransmuterBuffer extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: TransmuterBufferInterface;

  functions: {
    ADMIN(overrides?: CallOverrides): Promise<[string]>;

    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<[string]>;

    KEEPER(overrides?: CallOverrides): Promise<[string]>;

    _yieldTokens(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    alchemist(overrides?: CallOverrides): Promise<[string]>;

    burnCredit(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    currentExchanged(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    debtToken(overrides?: CallOverrides): Promise<[string]>;

    depositFunds(
      underlyingToken: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    exchange(
      underlyingToken: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    flowAvailable(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    flowRate(arg0: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    getAvailableFlow(
      underlyingToken: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getRoleAdmin(role: BytesLike, overrides?: CallOverrides): Promise<[string]>;

    getTotalCredit(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { credit: BigNumber }>;

    getTotalUnderlyingBuffered(
      underlyingToken: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { totalBuffered: BigNumber }>;

    getWeight(
      weightToken: string,
      token: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { weight: BigNumber }>;

    grantRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    hasRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    initialize(
      _admin: string,
      _debtToken: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    lastFlowrateUpdate(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    onERC20Received(
      underlyingToken: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    refreshStrategies(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    registerAsset(
      underlyingToken: string,
      _transmuter: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    registeredUnderlyings(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    renounceRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    revokeRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setAlchemist(
      _alchemist: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setFlowRate(
      underlyingToken: string,
      _flowRate: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setSource(
      source: string,
      flag: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setWeights(
      weightToken: string,
      tokens: string[],
      weights: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    sources(arg0: string, overrides?: CallOverrides): Promise<[boolean]>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    transmuter(arg0: string, overrides?: CallOverrides): Promise<[string]>;

    version(overrides?: CallOverrides): Promise<[string]>;

    weightings(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { totalWeight: BigNumber }>;

    withdraw(
      underlyingToken: string,
      amount: BigNumberish,
      recipient: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    withdrawFromAlchemist(
      yieldToken: string,
      shares: BigNumberish,
      minimumAmountOut: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  ADMIN(overrides?: CallOverrides): Promise<string>;

  DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<string>;

  KEEPER(overrides?: CallOverrides): Promise<string>;

  _yieldTokens(
    arg0: string,
    arg1: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  alchemist(overrides?: CallOverrides): Promise<string>;

  burnCredit(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  currentExchanged(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  debtToken(overrides?: CallOverrides): Promise<string>;

  depositFunds(
    underlyingToken: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  exchange(
    underlyingToken: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  flowAvailable(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  flowRate(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  getAvailableFlow(
    underlyingToken: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getRoleAdmin(role: BytesLike, overrides?: CallOverrides): Promise<string>;

  getTotalCredit(overrides?: CallOverrides): Promise<BigNumber>;

  getTotalUnderlyingBuffered(
    underlyingToken: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getWeight(
    weightToken: string,
    token: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  grantRole(
    role: BytesLike,
    account: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  hasRole(
    role: BytesLike,
    account: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  initialize(
    _admin: string,
    _debtToken: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  lastFlowrateUpdate(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  onERC20Received(
    underlyingToken: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  refreshStrategies(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  registerAsset(
    underlyingToken: string,
    _transmuter: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  registeredUnderlyings(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  renounceRole(
    role: BytesLike,
    account: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  revokeRole(
    role: BytesLike,
    account: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setAlchemist(
    _alchemist: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setFlowRate(
    underlyingToken: string,
    _flowRate: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setSource(
    source: string,
    flag: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setWeights(
    weightToken: string,
    tokens: string[],
    weights: BigNumberish[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  sources(arg0: string, overrides?: CallOverrides): Promise<boolean>;

  supportsInterface(
    interfaceId: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  transmuter(arg0: string, overrides?: CallOverrides): Promise<string>;

  version(overrides?: CallOverrides): Promise<string>;

  weightings(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  withdraw(
    underlyingToken: string,
    amount: BigNumberish,
    recipient: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  withdrawFromAlchemist(
    yieldToken: string,
    shares: BigNumberish,
    minimumAmountOut: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    ADMIN(overrides?: CallOverrides): Promise<string>;

    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<string>;

    KEEPER(overrides?: CallOverrides): Promise<string>;

    _yieldTokens(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    alchemist(overrides?: CallOverrides): Promise<string>;

    burnCredit(overrides?: CallOverrides): Promise<void>;

    currentExchanged(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    debtToken(overrides?: CallOverrides): Promise<string>;

    depositFunds(
      underlyingToken: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    exchange(underlyingToken: string, overrides?: CallOverrides): Promise<void>;

    flowAvailable(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    flowRate(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    getAvailableFlow(
      underlyingToken: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRoleAdmin(role: BytesLike, overrides?: CallOverrides): Promise<string>;

    getTotalCredit(overrides?: CallOverrides): Promise<BigNumber>;

    getTotalUnderlyingBuffered(
      underlyingToken: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getWeight(
      weightToken: string,
      token: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    grantRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<void>;

    hasRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    initialize(
      _admin: string,
      _debtToken: string,
      overrides?: CallOverrides
    ): Promise<void>;

    lastFlowrateUpdate(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    onERC20Received(
      underlyingToken: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    refreshStrategies(overrides?: CallOverrides): Promise<void>;

    registerAsset(
      underlyingToken: string,
      _transmuter: string,
      overrides?: CallOverrides
    ): Promise<void>;

    registeredUnderlyings(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    renounceRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<void>;

    revokeRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setAlchemist(_alchemist: string, overrides?: CallOverrides): Promise<void>;

    setFlowRate(
      underlyingToken: string,
      _flowRate: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setSource(
      source: string,
      flag: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    setWeights(
      weightToken: string,
      tokens: string[],
      weights: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;

    sources(arg0: string, overrides?: CallOverrides): Promise<boolean>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    transmuter(arg0: string, overrides?: CallOverrides): Promise<string>;

    version(overrides?: CallOverrides): Promise<string>;

    weightings(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    withdraw(
      underlyingToken: string,
      amount: BigNumberish,
      recipient: string,
      overrides?: CallOverrides
    ): Promise<void>;

    withdrawFromAlchemist(
      yieldToken: string,
      shares: BigNumberish,
      minimumAmountOut: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "RefreshStrategies()"(): TypedEventFilter<[], {}>;

    RefreshStrategies(): TypedEventFilter<[], {}>;

    "RegisterAsset(address,address)"(
      underlyingToken?: null,
      transmuter?: null
    ): TypedEventFilter<
      [string, string],
      { underlyingToken: string; transmuter: string }
    >;

    RegisterAsset(
      underlyingToken?: null,
      transmuter?: null
    ): TypedEventFilter<
      [string, string],
      { underlyingToken: string; transmuter: string }
    >;

    "RoleAdminChanged(bytes32,bytes32,bytes32)"(
      role?: BytesLike | null,
      previousAdminRole?: BytesLike | null,
      newAdminRole?: BytesLike | null
    ): TypedEventFilter<
      [string, string, string],
      { role: string; previousAdminRole: string; newAdminRole: string }
    >;

    RoleAdminChanged(
      role?: BytesLike | null,
      previousAdminRole?: BytesLike | null,
      newAdminRole?: BytesLike | null
    ): TypedEventFilter<
      [string, string, string],
      { role: string; previousAdminRole: string; newAdminRole: string }
    >;

    "RoleGranted(bytes32,address,address)"(
      role?: BytesLike | null,
      account?: string | null,
      sender?: string | null
    ): TypedEventFilter<
      [string, string, string],
      { role: string; account: string; sender: string }
    >;

    RoleGranted(
      role?: BytesLike | null,
      account?: string | null,
      sender?: string | null
    ): TypedEventFilter<
      [string, string, string],
      { role: string; account: string; sender: string }
    >;

    "RoleRevoked(bytes32,address,address)"(
      role?: BytesLike | null,
      account?: string | null,
      sender?: string | null
    ): TypedEventFilter<
      [string, string, string],
      { role: string; account: string; sender: string }
    >;

    RoleRevoked(
      role?: BytesLike | null,
      account?: string | null,
      sender?: string | null
    ): TypedEventFilter<
      [string, string, string],
      { role: string; account: string; sender: string }
    >;

    "SetAlchemist(address)"(
      alchemist?: null
    ): TypedEventFilter<[string], { alchemist: string }>;

    SetAlchemist(
      alchemist?: null
    ): TypedEventFilter<[string], { alchemist: string }>;

    "SetFlowRate(address,uint256)"(
      underlyingToken?: null,
      flowRate?: null
    ): TypedEventFilter<
      [string, BigNumber],
      { underlyingToken: string; flowRate: BigNumber }
    >;

    SetFlowRate(
      underlyingToken?: null,
      flowRate?: null
    ): TypedEventFilter<
      [string, BigNumber],
      { underlyingToken: string; flowRate: BigNumber }
    >;

    "SetSource(address,bool)"(
      source?: null,
      flag?: null
    ): TypedEventFilter<[string, boolean], { source: string; flag: boolean }>;

    SetSource(
      source?: null,
      flag?: null
    ): TypedEventFilter<[string, boolean], { source: string; flag: boolean }>;
  };

  estimateGas: {
    ADMIN(overrides?: CallOverrides): Promise<BigNumber>;

    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

    KEEPER(overrides?: CallOverrides): Promise<BigNumber>;

    _yieldTokens(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    alchemist(overrides?: CallOverrides): Promise<BigNumber>;

    burnCredit(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    currentExchanged(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    debtToken(overrides?: CallOverrides): Promise<BigNumber>;

    depositFunds(
      underlyingToken: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    exchange(
      underlyingToken: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    flowAvailable(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    flowRate(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    getAvailableFlow(
      underlyingToken: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRoleAdmin(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTotalCredit(overrides?: CallOverrides): Promise<BigNumber>;

    getTotalUnderlyingBuffered(
      underlyingToken: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getWeight(
      weightToken: string,
      token: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    grantRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    hasRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    initialize(
      _admin: string,
      _debtToken: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    lastFlowrateUpdate(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    onERC20Received(
      underlyingToken: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    refreshStrategies(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    registerAsset(
      underlyingToken: string,
      _transmuter: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    registeredUnderlyings(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    renounceRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    revokeRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setAlchemist(
      _alchemist: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setFlowRate(
      underlyingToken: string,
      _flowRate: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setSource(
      source: string,
      flag: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setWeights(
      weightToken: string,
      tokens: string[],
      weights: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    sources(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    transmuter(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    version(overrides?: CallOverrides): Promise<BigNumber>;

    weightings(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    withdraw(
      underlyingToken: string,
      amount: BigNumberish,
      recipient: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    withdrawFromAlchemist(
      yieldToken: string,
      shares: BigNumberish,
      minimumAmountOut: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    ADMIN(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    DEFAULT_ADMIN_ROLE(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    KEEPER(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    _yieldTokens(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    alchemist(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    burnCredit(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    currentExchanged(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    debtToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    depositFunds(
      underlyingToken: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    exchange(
      underlyingToken: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    flowAvailable(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    flowRate(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getAvailableFlow(
      underlyingToken: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRoleAdmin(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTotalCredit(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getTotalUnderlyingBuffered(
      underlyingToken: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getWeight(
      weightToken: string,
      token: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    grantRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    hasRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    initialize(
      _admin: string,
      _debtToken: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    lastFlowrateUpdate(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    onERC20Received(
      underlyingToken: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    refreshStrategies(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    registerAsset(
      underlyingToken: string,
      _transmuter: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    registeredUnderlyings(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    renounceRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    revokeRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setAlchemist(
      _alchemist: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setFlowRate(
      underlyingToken: string,
      _flowRate: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setSource(
      source: string,
      flag: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setWeights(
      weightToken: string,
      tokens: string[],
      weights: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    sources(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    transmuter(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    version(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    weightings(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    withdraw(
      underlyingToken: string,
      amount: BigNumberish,
      recipient: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    withdrawFromAlchemist(
      yieldToken: string,
      shares: BigNumberish,
      minimumAmountOut: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
