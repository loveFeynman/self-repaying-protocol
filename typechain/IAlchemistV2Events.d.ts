/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface IAlchemistV2EventsInterface extends ethers.utils.Interface {
  functions: {};

  events: {
    "AddUnderlyingToken(address)": EventFragment;
    "AddYieldToken(address)": EventFragment;
    "AdminUpdated(address)": EventFragment;
    "ApproveMint(address,address,uint256)": EventFragment;
    "ApproveWithdraw(address,address,address,uint256)": EventFragment;
    "Burn(address,uint256,address)": EventFragment;
    "CreditUnlockRateUpdated(address,uint256)": EventFragment;
    "Deposit(address,address,uint256,address)": EventFragment;
    "Donate(address,address,uint256)": EventFragment;
    "Harvest(address,uint256,uint256)": EventFragment;
    "KeeperSet(address,bool)": EventFragment;
    "Liquidate(address,address,address,uint256)": EventFragment;
    "LiquidationLimitUpdated(address,uint256,uint256)": EventFragment;
    "MaximumExpectedValueUpdated(address,uint256)": EventFragment;
    "MaximumLossUpdated(address,uint256)": EventFragment;
    "MinimumCollateralizationUpdated(uint256)": EventFragment;
    "Mint(address,uint256,address)": EventFragment;
    "MintingLimitUpdated(uint256,uint256)": EventFragment;
    "PendingAdminUpdated(address)": EventFragment;
    "ProtocolFeeReceiverUpdated(address)": EventFragment;
    "ProtocolFeeUpdated(uint256)": EventFragment;
    "Repay(address,address,uint256,address)": EventFragment;
    "RepayLimitUpdated(address,uint256,uint256)": EventFragment;
    "SentinelSet(address,bool)": EventFragment;
    "Snap(address,uint256)": EventFragment;
    "SweepTokens(address,uint256)": EventFragment;
    "TokenAdapterUpdated(address,address)": EventFragment;
    "TransmuterUpdated(address)": EventFragment;
    "UnderlyingTokenEnabled(address,bool)": EventFragment;
    "Withdraw(address,address,uint256,address)": EventFragment;
    "YieldTokenEnabled(address,bool)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AddUnderlyingToken"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "AddYieldToken"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "AdminUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ApproveMint"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ApproveWithdraw"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Burn"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "CreditUnlockRateUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Deposit"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Donate"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Harvest"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "KeeperSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Liquidate"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LiquidationLimitUpdated"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "MaximumExpectedValueUpdated"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "MaximumLossUpdated"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "MinimumCollateralizationUpdated"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Mint"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "MintingLimitUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PendingAdminUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ProtocolFeeReceiverUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ProtocolFeeUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Repay"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RepayLimitUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SentinelSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Snap"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SweepTokens"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TokenAdapterUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TransmuterUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UnderlyingTokenEnabled"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Withdraw"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "YieldTokenEnabled"): EventFragment;
}

export type AddUnderlyingTokenEvent = TypedEvent<
  [string] & { underlyingToken: string }
>;

export type AddYieldTokenEvent = TypedEvent<[string] & { yieldToken: string }>;

export type AdminUpdatedEvent = TypedEvent<[string] & { admin: string }>;

export type ApproveMintEvent = TypedEvent<
  [string, string, BigNumber] & {
    owner: string;
    spender: string;
    amount: BigNumber;
  }
>;

export type ApproveWithdrawEvent = TypedEvent<
  [string, string, string, BigNumber] & {
    owner: string;
    spender: string;
    yieldToken: string;
    amount: BigNumber;
  }
>;

export type BurnEvent = TypedEvent<
  [string, BigNumber, string] & {
    sender: string;
    amount: BigNumber;
    recipient: string;
  }
>;

export type CreditUnlockRateUpdatedEvent = TypedEvent<
  [string, BigNumber] & { yieldToken: string; blocks: BigNumber }
>;

export type DepositEvent = TypedEvent<
  [string, string, BigNumber, string] & {
    sender: string;
    yieldToken: string;
    amount: BigNumber;
    recipient: string;
  }
>;

export type DonateEvent = TypedEvent<
  [string, string, BigNumber] & {
    sender: string;
    yieldToken: string;
    amount: BigNumber;
  }
>;

export type HarvestEvent = TypedEvent<
  [string, BigNumber, BigNumber] & {
    yieldToken: string;
    minimumAmountOut: BigNumber;
    totalHarvested: BigNumber;
  }
>;

export type KeeperSetEvent = TypedEvent<
  [string, boolean] & { sentinel: string; flag: boolean }
>;

export type LiquidateEvent = TypedEvent<
  [string, string, string, BigNumber] & {
    owner: string;
    yieldToken: string;
    underlyingToken: string;
    shares: BigNumber;
  }
>;

export type LiquidationLimitUpdatedEvent = TypedEvent<
  [string, BigNumber, BigNumber] & {
    underlyingToken: string;
    maximum: BigNumber;
    blocks: BigNumber;
  }
>;

export type MaximumExpectedValueUpdatedEvent = TypedEvent<
  [string, BigNumber] & { yieldToken: string; maximumExpectedValue: BigNumber }
>;

export type MaximumLossUpdatedEvent = TypedEvent<
  [string, BigNumber] & { yieldToken: string; maximumLoss: BigNumber }
>;

export type MinimumCollateralizationUpdatedEvent = TypedEvent<
  [BigNumber] & { minimumCollateralization: BigNumber }
>;

export type MintEvent = TypedEvent<
  [string, BigNumber, string] & {
    owner: string;
    amount: BigNumber;
    recipient: string;
  }
>;

export type MintingLimitUpdatedEvent = TypedEvent<
  [BigNumber, BigNumber] & { maximum: BigNumber; blocks: BigNumber }
>;

export type PendingAdminUpdatedEvent = TypedEvent<
  [string] & { pendingAdmin: string }
>;

export type ProtocolFeeReceiverUpdatedEvent = TypedEvent<
  [string] & { protocolFeeReceiver: string }
>;

export type ProtocolFeeUpdatedEvent = TypedEvent<
  [BigNumber] & { protocolFee: BigNumber }
>;

export type RepayEvent = TypedEvent<
  [string, string, BigNumber, string] & {
    sender: string;
    underlyingToken: string;
    amount: BigNumber;
    recipient: string;
  }
>;

export type RepayLimitUpdatedEvent = TypedEvent<
  [string, BigNumber, BigNumber] & {
    underlyingToken: string;
    maximum: BigNumber;
    blocks: BigNumber;
  }
>;

export type SentinelSetEvent = TypedEvent<
  [string, boolean] & { sentinel: string; flag: boolean }
>;

export type SnapEvent = TypedEvent<
  [string, BigNumber] & { yieldToken: string; expectedValue: BigNumber }
>;

export type SweepTokensEvent = TypedEvent<
  [string, BigNumber] & { rewardToken: string; amount: BigNumber }
>;

export type TokenAdapterUpdatedEvent = TypedEvent<
  [string, string] & { yieldToken: string; tokenAdapter: string }
>;

export type TransmuterUpdatedEvent = TypedEvent<
  [string] & { transmuter: string }
>;

export type UnderlyingTokenEnabledEvent = TypedEvent<
  [string, boolean] & { underlyingToken: string; enabled: boolean }
>;

export type WithdrawEvent = TypedEvent<
  [string, string, BigNumber, string] & {
    owner: string;
    yieldToken: string;
    shares: BigNumber;
    recipient: string;
  }
>;

export type YieldTokenEnabledEvent = TypedEvent<
  [string, boolean] & { yieldToken: string; enabled: boolean }
>;

export class IAlchemistV2Events extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: IAlchemistV2EventsInterface;

  functions: {};

  callStatic: {};

  filters: {
    "AddUnderlyingToken(address)"(
      underlyingToken?: string | null
    ): TypedEventFilter<[string], { underlyingToken: string }>;

    AddUnderlyingToken(
      underlyingToken?: string | null
    ): TypedEventFilter<[string], { underlyingToken: string }>;

    "AddYieldToken(address)"(
      yieldToken?: string | null
    ): TypedEventFilter<[string], { yieldToken: string }>;

    AddYieldToken(
      yieldToken?: string | null
    ): TypedEventFilter<[string], { yieldToken: string }>;

    "AdminUpdated(address)"(
      admin?: null
    ): TypedEventFilter<[string], { admin: string }>;

    AdminUpdated(admin?: null): TypedEventFilter<[string], { admin: string }>;

    "ApproveMint(address,address,uint256)"(
      owner?: string | null,
      spender?: string | null,
      amount?: null
    ): TypedEventFilter<
      [string, string, BigNumber],
      { owner: string; spender: string; amount: BigNumber }
    >;

    ApproveMint(
      owner?: string | null,
      spender?: string | null,
      amount?: null
    ): TypedEventFilter<
      [string, string, BigNumber],
      { owner: string; spender: string; amount: BigNumber }
    >;

    "ApproveWithdraw(address,address,address,uint256)"(
      owner?: string | null,
      spender?: string | null,
      yieldToken?: string | null,
      amount?: null
    ): TypedEventFilter<
      [string, string, string, BigNumber],
      { owner: string; spender: string; yieldToken: string; amount: BigNumber }
    >;

    ApproveWithdraw(
      owner?: string | null,
      spender?: string | null,
      yieldToken?: string | null,
      amount?: null
    ): TypedEventFilter<
      [string, string, string, BigNumber],
      { owner: string; spender: string; yieldToken: string; amount: BigNumber }
    >;

    "Burn(address,uint256,address)"(
      sender?: string | null,
      amount?: null,
      recipient?: null
    ): TypedEventFilter<
      [string, BigNumber, string],
      { sender: string; amount: BigNumber; recipient: string }
    >;

    Burn(
      sender?: string | null,
      amount?: null,
      recipient?: null
    ): TypedEventFilter<
      [string, BigNumber, string],
      { sender: string; amount: BigNumber; recipient: string }
    >;

    "CreditUnlockRateUpdated(address,uint256)"(
      yieldToken?: null,
      blocks?: null
    ): TypedEventFilter<
      [string, BigNumber],
      { yieldToken: string; blocks: BigNumber }
    >;

    CreditUnlockRateUpdated(
      yieldToken?: null,
      blocks?: null
    ): TypedEventFilter<
      [string, BigNumber],
      { yieldToken: string; blocks: BigNumber }
    >;

    "Deposit(address,address,uint256,address)"(
      sender?: string | null,
      yieldToken?: string | null,
      amount?: null,
      recipient?: null
    ): TypedEventFilter<
      [string, string, BigNumber, string],
      {
        sender: string;
        yieldToken: string;
        amount: BigNumber;
        recipient: string;
      }
    >;

    Deposit(
      sender?: string | null,
      yieldToken?: string | null,
      amount?: null,
      recipient?: null
    ): TypedEventFilter<
      [string, string, BigNumber, string],
      {
        sender: string;
        yieldToken: string;
        amount: BigNumber;
        recipient: string;
      }
    >;

    "Donate(address,address,uint256)"(
      sender?: string | null,
      yieldToken?: string | null,
      amount?: null
    ): TypedEventFilter<
      [string, string, BigNumber],
      { sender: string; yieldToken: string; amount: BigNumber }
    >;

    Donate(
      sender?: string | null,
      yieldToken?: string | null,
      amount?: null
    ): TypedEventFilter<
      [string, string, BigNumber],
      { sender: string; yieldToken: string; amount: BigNumber }
    >;

    "Harvest(address,uint256,uint256)"(
      yieldToken?: string | null,
      minimumAmountOut?: null,
      totalHarvested?: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber],
      {
        yieldToken: string;
        minimumAmountOut: BigNumber;
        totalHarvested: BigNumber;
      }
    >;

    Harvest(
      yieldToken?: string | null,
      minimumAmountOut?: null,
      totalHarvested?: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber],
      {
        yieldToken: string;
        minimumAmountOut: BigNumber;
        totalHarvested: BigNumber;
      }
    >;

    "KeeperSet(address,bool)"(
      sentinel?: null,
      flag?: null
    ): TypedEventFilter<[string, boolean], { sentinel: string; flag: boolean }>;

    KeeperSet(
      sentinel?: null,
      flag?: null
    ): TypedEventFilter<[string, boolean], { sentinel: string; flag: boolean }>;

    "Liquidate(address,address,address,uint256)"(
      owner?: string | null,
      yieldToken?: string | null,
      underlyingToken?: string | null,
      shares?: null
    ): TypedEventFilter<
      [string, string, string, BigNumber],
      {
        owner: string;
        yieldToken: string;
        underlyingToken: string;
        shares: BigNumber;
      }
    >;

    Liquidate(
      owner?: string | null,
      yieldToken?: string | null,
      underlyingToken?: string | null,
      shares?: null
    ): TypedEventFilter<
      [string, string, string, BigNumber],
      {
        owner: string;
        yieldToken: string;
        underlyingToken: string;
        shares: BigNumber;
      }
    >;

    "LiquidationLimitUpdated(address,uint256,uint256)"(
      underlyingToken?: string | null,
      maximum?: null,
      blocks?: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber],
      { underlyingToken: string; maximum: BigNumber; blocks: BigNumber }
    >;

    LiquidationLimitUpdated(
      underlyingToken?: string | null,
      maximum?: null,
      blocks?: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber],
      { underlyingToken: string; maximum: BigNumber; blocks: BigNumber }
    >;

    "MaximumExpectedValueUpdated(address,uint256)"(
      yieldToken?: string | null,
      maximumExpectedValue?: null
    ): TypedEventFilter<
      [string, BigNumber],
      { yieldToken: string; maximumExpectedValue: BigNumber }
    >;

    MaximumExpectedValueUpdated(
      yieldToken?: string | null,
      maximumExpectedValue?: null
    ): TypedEventFilter<
      [string, BigNumber],
      { yieldToken: string; maximumExpectedValue: BigNumber }
    >;

    "MaximumLossUpdated(address,uint256)"(
      yieldToken?: string | null,
      maximumLoss?: null
    ): TypedEventFilter<
      [string, BigNumber],
      { yieldToken: string; maximumLoss: BigNumber }
    >;

    MaximumLossUpdated(
      yieldToken?: string | null,
      maximumLoss?: null
    ): TypedEventFilter<
      [string, BigNumber],
      { yieldToken: string; maximumLoss: BigNumber }
    >;

    "MinimumCollateralizationUpdated(uint256)"(
      minimumCollateralization?: null
    ): TypedEventFilter<[BigNumber], { minimumCollateralization: BigNumber }>;

    MinimumCollateralizationUpdated(
      minimumCollateralization?: null
    ): TypedEventFilter<[BigNumber], { minimumCollateralization: BigNumber }>;

    "Mint(address,uint256,address)"(
      owner?: string | null,
      amount?: null,
      recipient?: null
    ): TypedEventFilter<
      [string, BigNumber, string],
      { owner: string; amount: BigNumber; recipient: string }
    >;

    Mint(
      owner?: string | null,
      amount?: null,
      recipient?: null
    ): TypedEventFilter<
      [string, BigNumber, string],
      { owner: string; amount: BigNumber; recipient: string }
    >;

    "MintingLimitUpdated(uint256,uint256)"(
      maximum?: null,
      blocks?: null
    ): TypedEventFilter<
      [BigNumber, BigNumber],
      { maximum: BigNumber; blocks: BigNumber }
    >;

    MintingLimitUpdated(
      maximum?: null,
      blocks?: null
    ): TypedEventFilter<
      [BigNumber, BigNumber],
      { maximum: BigNumber; blocks: BigNumber }
    >;

    "PendingAdminUpdated(address)"(
      pendingAdmin?: null
    ): TypedEventFilter<[string], { pendingAdmin: string }>;

    PendingAdminUpdated(
      pendingAdmin?: null
    ): TypedEventFilter<[string], { pendingAdmin: string }>;

    "ProtocolFeeReceiverUpdated(address)"(
      protocolFeeReceiver?: null
    ): TypedEventFilter<[string], { protocolFeeReceiver: string }>;

    ProtocolFeeReceiverUpdated(
      protocolFeeReceiver?: null
    ): TypedEventFilter<[string], { protocolFeeReceiver: string }>;

    "ProtocolFeeUpdated(uint256)"(
      protocolFee?: null
    ): TypedEventFilter<[BigNumber], { protocolFee: BigNumber }>;

    ProtocolFeeUpdated(
      protocolFee?: null
    ): TypedEventFilter<[BigNumber], { protocolFee: BigNumber }>;

    "Repay(address,address,uint256,address)"(
      sender?: string | null,
      underlyingToken?: string | null,
      amount?: null,
      recipient?: null
    ): TypedEventFilter<
      [string, string, BigNumber, string],
      {
        sender: string;
        underlyingToken: string;
        amount: BigNumber;
        recipient: string;
      }
    >;

    Repay(
      sender?: string | null,
      underlyingToken?: string | null,
      amount?: null,
      recipient?: null
    ): TypedEventFilter<
      [string, string, BigNumber, string],
      {
        sender: string;
        underlyingToken: string;
        amount: BigNumber;
        recipient: string;
      }
    >;

    "RepayLimitUpdated(address,uint256,uint256)"(
      underlyingToken?: string | null,
      maximum?: null,
      blocks?: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber],
      { underlyingToken: string; maximum: BigNumber; blocks: BigNumber }
    >;

    RepayLimitUpdated(
      underlyingToken?: string | null,
      maximum?: null,
      blocks?: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber],
      { underlyingToken: string; maximum: BigNumber; blocks: BigNumber }
    >;

    "SentinelSet(address,bool)"(
      sentinel?: null,
      flag?: null
    ): TypedEventFilter<[string, boolean], { sentinel: string; flag: boolean }>;

    SentinelSet(
      sentinel?: null,
      flag?: null
    ): TypedEventFilter<[string, boolean], { sentinel: string; flag: boolean }>;

    "Snap(address,uint256)"(
      yieldToken?: string | null,
      expectedValue?: null
    ): TypedEventFilter<
      [string, BigNumber],
      { yieldToken: string; expectedValue: BigNumber }
    >;

    Snap(
      yieldToken?: string | null,
      expectedValue?: null
    ): TypedEventFilter<
      [string, BigNumber],
      { yieldToken: string; expectedValue: BigNumber }
    >;

    "SweepTokens(address,uint256)"(
      rewardToken?: string | null,
      amount?: null
    ): TypedEventFilter<
      [string, BigNumber],
      { rewardToken: string; amount: BigNumber }
    >;

    SweepTokens(
      rewardToken?: string | null,
      amount?: null
    ): TypedEventFilter<
      [string, BigNumber],
      { rewardToken: string; amount: BigNumber }
    >;

    "TokenAdapterUpdated(address,address)"(
      yieldToken?: null,
      tokenAdapter?: null
    ): TypedEventFilter<
      [string, string],
      { yieldToken: string; tokenAdapter: string }
    >;

    TokenAdapterUpdated(
      yieldToken?: null,
      tokenAdapter?: null
    ): TypedEventFilter<
      [string, string],
      { yieldToken: string; tokenAdapter: string }
    >;

    "TransmuterUpdated(address)"(
      transmuter?: null
    ): TypedEventFilter<[string], { transmuter: string }>;

    TransmuterUpdated(
      transmuter?: null
    ): TypedEventFilter<[string], { transmuter: string }>;

    "UnderlyingTokenEnabled(address,bool)"(
      underlyingToken?: string | null,
      enabled?: null
    ): TypedEventFilter<
      [string, boolean],
      { underlyingToken: string; enabled: boolean }
    >;

    UnderlyingTokenEnabled(
      underlyingToken?: string | null,
      enabled?: null
    ): TypedEventFilter<
      [string, boolean],
      { underlyingToken: string; enabled: boolean }
    >;

    "Withdraw(address,address,uint256,address)"(
      owner?: string | null,
      yieldToken?: string | null,
      shares?: null,
      recipient?: null
    ): TypedEventFilter<
      [string, string, BigNumber, string],
      {
        owner: string;
        yieldToken: string;
        shares: BigNumber;
        recipient: string;
      }
    >;

    Withdraw(
      owner?: string | null,
      yieldToken?: string | null,
      shares?: null,
      recipient?: null
    ): TypedEventFilter<
      [string, string, BigNumber, string],
      {
        owner: string;
        yieldToken: string;
        shares: BigNumber;
        recipient: string;
      }
    >;

    "YieldTokenEnabled(address,bool)"(
      yieldToken?: string | null,
      enabled?: null
    ): TypedEventFilter<
      [string, boolean],
      { yieldToken: string; enabled: boolean }
    >;

    YieldTokenEnabled(
      yieldToken?: string | null,
      enabled?: null
    ): TypedEventFilter<
      [string, boolean],
      { yieldToken: string; enabled: boolean }
    >;
  };

  estimateGas: {};

  populateTransaction: {};
}
