/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface ITransmuterV2Interface extends ethers.utils.Interface {
  functions: {
    "claim(uint256,address)": FunctionFragment;
    "conversionFactor()": FunctionFragment;
    "deposit(uint256,address)": FunctionFragment;
    "exchange(uint256)": FunctionFragment;
    "getClaimableBalance(address)": FunctionFragment;
    "getExchangedBalance(address)": FunctionFragment;
    "getUnexchangedBalance(address)": FunctionFragment;
    "underlyingToken()": FunctionFragment;
    "version()": FunctionFragment;
    "whitelist()": FunctionFragment;
    "withdraw(uint256,address)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "claim",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "conversionFactor",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "deposit",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "exchange",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getClaimableBalance",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getExchangedBalance",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getUnexchangedBalance",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "underlyingToken",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "version", values?: undefined): string;
  encodeFunctionData(functionFragment: "whitelist", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "withdraw",
    values: [BigNumberish, string]
  ): string;

  decodeFunctionResult(functionFragment: "claim", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "conversionFactor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "deposit", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "exchange", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getClaimableBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getExchangedBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUnexchangedBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "underlyingToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "version", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "whitelist", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;

  events: {
    "AdminUpdated(address)": EventFragment;
    "Claim(address,address,uint256)": EventFragment;
    "Deposit(address,address,uint256)": EventFragment;
    "Exchange(address,uint256)": EventFragment;
    "Paused(bool)": EventFragment;
    "PendingAdminUpdated(address)": EventFragment;
    "Withdraw(address,address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AdminUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Claim"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Deposit"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Exchange"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Paused"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PendingAdminUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Withdraw"): EventFragment;
}

export type AdminUpdatedEvent = TypedEvent<[string] & { admin: string }>;

export type ClaimEvent = TypedEvent<
  [string, string, BigNumber] & {
    sender: string;
    recipient: string;
    amount: BigNumber;
  }
>;

export type DepositEvent = TypedEvent<
  [string, string, BigNumber] & {
    sender: string;
    owner: string;
    amount: BigNumber;
  }
>;

export type ExchangeEvent = TypedEvent<
  [string, BigNumber] & { sender: string; amount: BigNumber }
>;

export type PausedEvent = TypedEvent<[boolean] & { flag: boolean }>;

export type PendingAdminUpdatedEvent = TypedEvent<
  [string] & { pendingAdmin: string }
>;

export type WithdrawEvent = TypedEvent<
  [string, string, BigNumber] & {
    sender: string;
    recipient: string;
    amount: BigNumber;
  }
>;

export class ITransmuterV2 extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: ITransmuterV2Interface;

  functions: {
    claim(
      amount: BigNumberish,
      recipient: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    conversionFactor(overrides?: CallOverrides): Promise<[BigNumber]>;

    deposit(
      amount: BigNumberish,
      owner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    exchange(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getClaimableBalance(
      owner: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getExchangedBalance(
      owner: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getUnexchangedBalance(
      owner: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    underlyingToken(overrides?: CallOverrides): Promise<[string]>;

    version(overrides?: CallOverrides): Promise<[string]>;

    whitelist(
      overrides?: CallOverrides
    ): Promise<[string] & { whitelist: string }>;

    withdraw(
      amount: BigNumberish,
      recipient: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  claim(
    amount: BigNumberish,
    recipient: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  conversionFactor(overrides?: CallOverrides): Promise<BigNumber>;

  deposit(
    amount: BigNumberish,
    owner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  exchange(
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getClaimableBalance(
    owner: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getExchangedBalance(
    owner: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getUnexchangedBalance(
    owner: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  underlyingToken(overrides?: CallOverrides): Promise<string>;

  version(overrides?: CallOverrides): Promise<string>;

  whitelist(overrides?: CallOverrides): Promise<string>;

  withdraw(
    amount: BigNumberish,
    recipient: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    claim(
      amount: BigNumberish,
      recipient: string,
      overrides?: CallOverrides
    ): Promise<void>;

    conversionFactor(overrides?: CallOverrides): Promise<BigNumber>;

    deposit(
      amount: BigNumberish,
      owner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    exchange(amount: BigNumberish, overrides?: CallOverrides): Promise<void>;

    getClaimableBalance(
      owner: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getExchangedBalance(
      owner: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getUnexchangedBalance(
      owner: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    underlyingToken(overrides?: CallOverrides): Promise<string>;

    version(overrides?: CallOverrides): Promise<string>;

    whitelist(overrides?: CallOverrides): Promise<string>;

    withdraw(
      amount: BigNumberish,
      recipient: string,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "AdminUpdated(address)"(
      admin?: null
    ): TypedEventFilter<[string], { admin: string }>;

    AdminUpdated(admin?: null): TypedEventFilter<[string], { admin: string }>;

    "Claim(address,address,uint256)"(
      sender?: string | null,
      recipient?: string | null,
      amount?: null
    ): TypedEventFilter<
      [string, string, BigNumber],
      { sender: string; recipient: string; amount: BigNumber }
    >;

    Claim(
      sender?: string | null,
      recipient?: string | null,
      amount?: null
    ): TypedEventFilter<
      [string, string, BigNumber],
      { sender: string; recipient: string; amount: BigNumber }
    >;

    "Deposit(address,address,uint256)"(
      sender?: string | null,
      owner?: string | null,
      amount?: null
    ): TypedEventFilter<
      [string, string, BigNumber],
      { sender: string; owner: string; amount: BigNumber }
    >;

    Deposit(
      sender?: string | null,
      owner?: string | null,
      amount?: null
    ): TypedEventFilter<
      [string, string, BigNumber],
      { sender: string; owner: string; amount: BigNumber }
    >;

    "Exchange(address,uint256)"(
      sender?: string | null,
      amount?: null
    ): TypedEventFilter<
      [string, BigNumber],
      { sender: string; amount: BigNumber }
    >;

    Exchange(
      sender?: string | null,
      amount?: null
    ): TypedEventFilter<
      [string, BigNumber],
      { sender: string; amount: BigNumber }
    >;

    "Paused(bool)"(flag?: null): TypedEventFilter<[boolean], { flag: boolean }>;

    Paused(flag?: null): TypedEventFilter<[boolean], { flag: boolean }>;

    "PendingAdminUpdated(address)"(
      pendingAdmin?: null
    ): TypedEventFilter<[string], { pendingAdmin: string }>;

    PendingAdminUpdated(
      pendingAdmin?: null
    ): TypedEventFilter<[string], { pendingAdmin: string }>;

    "Withdraw(address,address,uint256)"(
      sender?: string | null,
      recipient?: string | null,
      amount?: null
    ): TypedEventFilter<
      [string, string, BigNumber],
      { sender: string; recipient: string; amount: BigNumber }
    >;

    Withdraw(
      sender?: string | null,
      recipient?: string | null,
      amount?: null
    ): TypedEventFilter<
      [string, string, BigNumber],
      { sender: string; recipient: string; amount: BigNumber }
    >;
  };

  estimateGas: {
    claim(
      amount: BigNumberish,
      recipient: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    conversionFactor(overrides?: CallOverrides): Promise<BigNumber>;

    deposit(
      amount: BigNumberish,
      owner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    exchange(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getClaimableBalance(
      owner: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getExchangedBalance(
      owner: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getUnexchangedBalance(
      owner: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    underlyingToken(overrides?: CallOverrides): Promise<BigNumber>;

    version(overrides?: CallOverrides): Promise<BigNumber>;

    whitelist(overrides?: CallOverrides): Promise<BigNumber>;

    withdraw(
      amount: BigNumberish,
      recipient: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    claim(
      amount: BigNumberish,
      recipient: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    conversionFactor(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    deposit(
      amount: BigNumberish,
      owner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    exchange(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getClaimableBalance(
      owner: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getExchangedBalance(
      owner: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getUnexchangedBalance(
      owner: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    underlyingToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    version(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    whitelist(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    withdraw(
      amount: BigNumberish,
      recipient: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
