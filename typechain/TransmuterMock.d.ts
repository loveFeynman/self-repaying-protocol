/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface TransmuterMockInterface extends ethers.utils.Interface {
  functions: {
    "TRANSMUTATION_PERIOD()": FunctionFragment;
    "ZERO_ADDRESS()": FunctionFragment;
    "alToken()": FunctionFragment;
    "claim(uint256,address)": FunctionFragment;
    "collateralSource()": FunctionFragment;
    "exchange(uint256)": FunctionFragment;
    "governance()": FunctionFragment;
    "setWhitelist(address,bool)": FunctionFragment;
    "totalExchanged()": FunctionFragment;
    "underlyingToken()": FunctionFragment;
    "whiteList(address)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "TRANSMUTATION_PERIOD",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "ZERO_ADDRESS",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "alToken", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "claim",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "collateralSource",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "exchange",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "governance",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setWhitelist",
    values: [string, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "totalExchanged",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "underlyingToken",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "whiteList", values: [string]): string;

  decodeFunctionResult(
    functionFragment: "TRANSMUTATION_PERIOD",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "ZERO_ADDRESS",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "alToken", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "claim", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "collateralSource",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "exchange", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "governance", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setWhitelist",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalExchanged",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "underlyingToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "whiteList", data: BytesLike): Result;

  events: {
    "Distribution(address,address,uint256)": EventFragment;
    "WhitelistSet(address,bool)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Distribution"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "WhitelistSet"): EventFragment;
}

export type DistributionEvent = TypedEvent<
  [string, string, BigNumber] & {
    origin: string;
    underlying: string;
    amount: BigNumber;
  }
>;

export type WhitelistSetEvent = TypedEvent<
  [string, boolean] & { whitelisted: string; state: boolean }
>;

export class TransmuterMock extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: TransmuterMockInterface;

  functions: {
    TRANSMUTATION_PERIOD(overrides?: CallOverrides): Promise<[BigNumber]>;

    ZERO_ADDRESS(overrides?: CallOverrides): Promise<[string]>;

    alToken(overrides?: CallOverrides): Promise<[string]>;

    claim(
      amount: BigNumberish,
      recipient: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    collateralSource(overrides?: CallOverrides): Promise<[string]>;

    exchange(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    governance(overrides?: CallOverrides): Promise<[string]>;

    setWhitelist(
      _toWhitelist: string,
      _state: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    totalExchanged(overrides?: CallOverrides): Promise<[BigNumber]>;

    underlyingToken(overrides?: CallOverrides): Promise<[string]>;

    whiteList(arg0: string, overrides?: CallOverrides): Promise<[boolean]>;
  };

  TRANSMUTATION_PERIOD(overrides?: CallOverrides): Promise<BigNumber>;

  ZERO_ADDRESS(overrides?: CallOverrides): Promise<string>;

  alToken(overrides?: CallOverrides): Promise<string>;

  claim(
    amount: BigNumberish,
    recipient: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  collateralSource(overrides?: CallOverrides): Promise<string>;

  exchange(
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  governance(overrides?: CallOverrides): Promise<string>;

  setWhitelist(
    _toWhitelist: string,
    _state: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  totalExchanged(overrides?: CallOverrides): Promise<BigNumber>;

  underlyingToken(overrides?: CallOverrides): Promise<string>;

  whiteList(arg0: string, overrides?: CallOverrides): Promise<boolean>;

  callStatic: {
    TRANSMUTATION_PERIOD(overrides?: CallOverrides): Promise<BigNumber>;

    ZERO_ADDRESS(overrides?: CallOverrides): Promise<string>;

    alToken(overrides?: CallOverrides): Promise<string>;

    claim(
      amount: BigNumberish,
      recipient: string,
      overrides?: CallOverrides
    ): Promise<void>;

    collateralSource(overrides?: CallOverrides): Promise<string>;

    exchange(amount: BigNumberish, overrides?: CallOverrides): Promise<void>;

    governance(overrides?: CallOverrides): Promise<string>;

    setWhitelist(
      _toWhitelist: string,
      _state: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    totalExchanged(overrides?: CallOverrides): Promise<BigNumber>;

    underlyingToken(overrides?: CallOverrides): Promise<string>;

    whiteList(arg0: string, overrides?: CallOverrides): Promise<boolean>;
  };

  filters: {
    "Distribution(address,address,uint256)"(
      origin?: null,
      underlying?: null,
      amount?: null
    ): TypedEventFilter<
      [string, string, BigNumber],
      { origin: string; underlying: string; amount: BigNumber }
    >;

    Distribution(
      origin?: null,
      underlying?: null,
      amount?: null
    ): TypedEventFilter<
      [string, string, BigNumber],
      { origin: string; underlying: string; amount: BigNumber }
    >;

    "WhitelistSet(address,bool)"(
      whitelisted?: null,
      state?: null
    ): TypedEventFilter<
      [string, boolean],
      { whitelisted: string; state: boolean }
    >;

    WhitelistSet(
      whitelisted?: null,
      state?: null
    ): TypedEventFilter<
      [string, boolean],
      { whitelisted: string; state: boolean }
    >;
  };

  estimateGas: {
    TRANSMUTATION_PERIOD(overrides?: CallOverrides): Promise<BigNumber>;

    ZERO_ADDRESS(overrides?: CallOverrides): Promise<BigNumber>;

    alToken(overrides?: CallOverrides): Promise<BigNumber>;

    claim(
      amount: BigNumberish,
      recipient: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    collateralSource(overrides?: CallOverrides): Promise<BigNumber>;

    exchange(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    governance(overrides?: CallOverrides): Promise<BigNumber>;

    setWhitelist(
      _toWhitelist: string,
      _state: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    totalExchanged(overrides?: CallOverrides): Promise<BigNumber>;

    underlyingToken(overrides?: CallOverrides): Promise<BigNumber>;

    whiteList(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    TRANSMUTATION_PERIOD(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    ZERO_ADDRESS(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    alToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    claim(
      amount: BigNumberish,
      recipient: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    collateralSource(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    exchange(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    governance(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    setWhitelist(
      _toWhitelist: string,
      _state: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    totalExchanged(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    underlyingToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    whiteList(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
