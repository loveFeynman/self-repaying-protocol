/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface AlchemistV2Interface extends ethers.utils.Interface {
  functions: {
    "BPS()": FunctionFragment;
    "FIXED_POINT_SCALAR()": FunctionFragment;
    "acceptAdmin()": FunctionFragment;
    "accounts(address)": FunctionFragment;
    "addUnderlyingToken(address,(uint256,uint256,uint256,uint256,uint256,uint256))": FunctionFragment;
    "addYieldToken(address,(address,uint256,uint256,uint256))": FunctionFragment;
    "admin()": FunctionFragment;
    "approveMint(address,uint256)": FunctionFragment;
    "approveWithdraw(address,address,uint256)": FunctionFragment;
    "burn(uint256,address)": FunctionFragment;
    "configureCreditUnlockRate(address,uint256)": FunctionFragment;
    "configureLiquidationLimit(address,uint256,uint256)": FunctionFragment;
    "configureMintingLimit(uint256,uint256)": FunctionFragment;
    "configureRepayLimit(address,uint256,uint256)": FunctionFragment;
    "debtToken()": FunctionFragment;
    "deposit(address,uint256,address)": FunctionFragment;
    "depositUnderlying(address,uint256,address,uint256)": FunctionFragment;
    "donate(address,uint256)": FunctionFragment;
    "getLiquidationLimitInfo(address)": FunctionFragment;
    "getMintLimitInfo()": FunctionFragment;
    "getRepayLimitInfo(address)": FunctionFragment;
    "getSupportedUnderlyingTokens()": FunctionFragment;
    "getSupportedYieldTokens()": FunctionFragment;
    "getUnderlyingTokenParameters(address)": FunctionFragment;
    "getUnderlyingTokensPerShare(address)": FunctionFragment;
    "getYieldTokenParameters(address)": FunctionFragment;
    "getYieldTokensPerShare(address)": FunctionFragment;
    "harvest(address,uint256)": FunctionFragment;
    "initialize((address,address,address,uint256,uint256,address,uint256,uint256,uint256,address))": FunctionFragment;
    "isSupportedUnderlyingToken(address)": FunctionFragment;
    "isSupportedYieldToken(address)": FunctionFragment;
    "keepers(address)": FunctionFragment;
    "liquidate(address,uint256,uint256)": FunctionFragment;
    "minimumCollateralization()": FunctionFragment;
    "mint(uint256,address)": FunctionFragment;
    "mintAllowance(address,address)": FunctionFragment;
    "mintFrom(address,uint256,address)": FunctionFragment;
    "multicall(bytes[])": FunctionFragment;
    "pendingAdmin()": FunctionFragment;
    "poke(address)": FunctionFragment;
    "positions(address,address)": FunctionFragment;
    "protocolFee()": FunctionFragment;
    "protocolFeeReceiver()": FunctionFragment;
    "repay(address,uint256,address)": FunctionFragment;
    "sentinels(address)": FunctionFragment;
    "setKeeper(address,bool)": FunctionFragment;
    "setMaximumExpectedValue(address,uint256)": FunctionFragment;
    "setMaximumLoss(address,uint256)": FunctionFragment;
    "setMinimumCollateralization(uint256)": FunctionFragment;
    "setPendingAdmin(address)": FunctionFragment;
    "setProtocolFee(uint256)": FunctionFragment;
    "setProtocolFeeReceiver(address)": FunctionFragment;
    "setSentinel(address,bool)": FunctionFragment;
    "setTokenAdapter(address,address)": FunctionFragment;
    "setTransmuter(address)": FunctionFragment;
    "setUnderlyingTokenEnabled(address,bool)": FunctionFragment;
    "setYieldTokenEnabled(address,bool)": FunctionFragment;
    "snap(address)": FunctionFragment;
    "sweepTokens(address,uint256)": FunctionFragment;
    "transmuter()": FunctionFragment;
    "version()": FunctionFragment;
    "whitelist()": FunctionFragment;
    "withdraw(address,uint256,address)": FunctionFragment;
    "withdrawAllowance(address,address,address)": FunctionFragment;
    "withdrawFrom(address,address,uint256,address)": FunctionFragment;
    "withdrawUnderlying(address,uint256,address,uint256)": FunctionFragment;
    "withdrawUnderlyingFrom(address,address,uint256,address,uint256)": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "BPS", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "FIXED_POINT_SCALAR",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "acceptAdmin",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "accounts", values: [string]): string;
  encodeFunctionData(
    functionFragment: "addUnderlyingToken",
    values: [
      string,
      {
        repayLimitMinimum: BigNumberish;
        repayLimitMaximum: BigNumberish;
        repayLimitBlocks: BigNumberish;
        liquidationLimitMinimum: BigNumberish;
        liquidationLimitMaximum: BigNumberish;
        liquidationLimitBlocks: BigNumberish;
      }
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "addYieldToken",
    values: [
      string,
      {
        adapter: string;
        maximumLoss: BigNumberish;
        maximumExpectedValue: BigNumberish;
        creditUnlockBlocks: BigNumberish;
      }
    ]
  ): string;
  encodeFunctionData(functionFragment: "admin", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "approveMint",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "approveWithdraw",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "burn",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "configureCreditUnlockRate",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "configureLiquidationLimit",
    values: [string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "configureMintingLimit",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "configureRepayLimit",
    values: [string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "debtToken", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "deposit",
    values: [string, BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "depositUnderlying",
    values: [string, BigNumberish, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "donate",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getLiquidationLimitInfo",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getMintLimitInfo",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getRepayLimitInfo",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getSupportedUnderlyingTokens",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getSupportedYieldTokens",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getUnderlyingTokenParameters",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getUnderlyingTokensPerShare",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getYieldTokenParameters",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getYieldTokensPerShare",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "harvest",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [
      {
        admin: string;
        debtToken: string;
        transmuter: string;
        minimumCollateralization: BigNumberish;
        protocolFee: BigNumberish;
        protocolFeeReceiver: string;
        mintingLimitMinimum: BigNumberish;
        mintingLimitMaximum: BigNumberish;
        mintingLimitBlocks: BigNumberish;
        whitelist: string;
      }
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "isSupportedUnderlyingToken",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "isSupportedYieldToken",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "keepers", values: [string]): string;
  encodeFunctionData(
    functionFragment: "liquidate",
    values: [string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "minimumCollateralization",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "mint",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "mintAllowance",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "mintFrom",
    values: [string, BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "multicall",
    values: [BytesLike[]]
  ): string;
  encodeFunctionData(
    functionFragment: "pendingAdmin",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "poke", values: [string]): string;
  encodeFunctionData(
    functionFragment: "positions",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "protocolFee",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "protocolFeeReceiver",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "repay",
    values: [string, BigNumberish, string]
  ): string;
  encodeFunctionData(functionFragment: "sentinels", values: [string]): string;
  encodeFunctionData(
    functionFragment: "setKeeper",
    values: [string, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setMaximumExpectedValue",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setMaximumLoss",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setMinimumCollateralization",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setPendingAdmin",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setProtocolFee",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setProtocolFeeReceiver",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setSentinel",
    values: [string, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setTokenAdapter",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "setTransmuter",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setUnderlyingTokenEnabled",
    values: [string, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setYieldTokenEnabled",
    values: [string, boolean]
  ): string;
  encodeFunctionData(functionFragment: "snap", values: [string]): string;
  encodeFunctionData(
    functionFragment: "sweepTokens",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transmuter",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "version", values?: undefined): string;
  encodeFunctionData(functionFragment: "whitelist", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "withdraw",
    values: [string, BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawAllowance",
    values: [string, string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawFrom",
    values: [string, string, BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawUnderlying",
    values: [string, BigNumberish, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawUnderlyingFrom",
    values: [string, string, BigNumberish, string, BigNumberish]
  ): string;

  decodeFunctionResult(functionFragment: "BPS", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "FIXED_POINT_SCALAR",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "acceptAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "accounts", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "addUnderlyingToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addYieldToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "admin", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "approveMint",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "approveWithdraw",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "burn", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "configureCreditUnlockRate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "configureLiquidationLimit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "configureMintingLimit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "configureRepayLimit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "debtToken", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "deposit", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "depositUnderlying",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "donate", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getLiquidationLimitInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getMintLimitInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRepayLimitInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getSupportedUnderlyingTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getSupportedYieldTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUnderlyingTokenParameters",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUnderlyingTokensPerShare",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getYieldTokenParameters",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getYieldTokensPerShare",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "harvest", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isSupportedUnderlyingToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isSupportedYieldToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "keepers", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "liquidate", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "minimumCollateralization",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "mint", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "mintAllowance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "mintFrom", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "multicall", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "pendingAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "poke", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "positions", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "protocolFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "protocolFeeReceiver",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "repay", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "sentinels", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setKeeper", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setMaximumExpectedValue",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMaximumLoss",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMinimumCollateralization",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setPendingAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setProtocolFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setProtocolFeeReceiver",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setSentinel",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setTokenAdapter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setTransmuter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setUnderlyingTokenEnabled",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setYieldTokenEnabled",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "snap", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "sweepTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "transmuter", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "version", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "whitelist", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "withdrawAllowance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawFrom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawUnderlying",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawUnderlyingFrom",
    data: BytesLike
  ): Result;

  events: {
    "AddUnderlyingToken(address)": EventFragment;
    "AddYieldToken(address)": EventFragment;
    "AdminUpdated(address)": EventFragment;
    "ApproveMint(address,address,uint256)": EventFragment;
    "ApproveWithdraw(address,address,address,uint256)": EventFragment;
    "Burn(address,uint256,address)": EventFragment;
    "CreditUnlockRateUpdated(address,uint256)": EventFragment;
    "Deposit(address,address,uint256,address)": EventFragment;
    "Donate(address,address,uint256)": EventFragment;
    "Harvest(address,uint256,uint256,uint256)": EventFragment;
    "KeeperSet(address,bool)": EventFragment;
    "Liquidate(address,address,address,uint256,uint256)": EventFragment;
    "LiquidationLimitUpdated(address,uint256,uint256)": EventFragment;
    "MaximumExpectedValueUpdated(address,uint256)": EventFragment;
    "MaximumLossUpdated(address,uint256)": EventFragment;
    "MinimumCollateralizationUpdated(uint256)": EventFragment;
    "Mint(address,uint256,address)": EventFragment;
    "MintingLimitUpdated(uint256,uint256)": EventFragment;
    "PendingAdminUpdated(address)": EventFragment;
    "ProtocolFeeReceiverUpdated(address)": EventFragment;
    "ProtocolFeeUpdated(uint256)": EventFragment;
    "Repay(address,address,uint256,address,uint256)": EventFragment;
    "RepayLimitUpdated(address,uint256,uint256)": EventFragment;
    "SentinelSet(address,bool)": EventFragment;
    "Snap(address,uint256)": EventFragment;
    "SweepTokens(address,uint256)": EventFragment;
    "TokenAdapterUpdated(address,address)": EventFragment;
    "TransmuterUpdated(address)": EventFragment;
    "UnderlyingTokenEnabled(address,bool)": EventFragment;
    "Withdraw(address,address,uint256,address)": EventFragment;
    "YieldTokenEnabled(address,bool)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AddUnderlyingToken"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "AddYieldToken"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "AdminUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ApproveMint"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ApproveWithdraw"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Burn"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "CreditUnlockRateUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Deposit"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Donate"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Harvest"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "KeeperSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Liquidate"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LiquidationLimitUpdated"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "MaximumExpectedValueUpdated"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "MaximumLossUpdated"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "MinimumCollateralizationUpdated"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Mint"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "MintingLimitUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PendingAdminUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ProtocolFeeReceiverUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ProtocolFeeUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Repay"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RepayLimitUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SentinelSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Snap"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SweepTokens"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TokenAdapterUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TransmuterUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UnderlyingTokenEnabled"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Withdraw"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "YieldTokenEnabled"): EventFragment;
}

export type AddUnderlyingTokenEvent = TypedEvent<
  [string] & { underlyingToken: string }
>;

export type AddYieldTokenEvent = TypedEvent<[string] & { yieldToken: string }>;

export type AdminUpdatedEvent = TypedEvent<[string] & { admin: string }>;

export type ApproveMintEvent = TypedEvent<
  [string, string, BigNumber] & {
    owner: string;
    spender: string;
    amount: BigNumber;
  }
>;

export type ApproveWithdrawEvent = TypedEvent<
  [string, string, string, BigNumber] & {
    owner: string;
    spender: string;
    yieldToken: string;
    amount: BigNumber;
  }
>;

export type BurnEvent = TypedEvent<
  [string, BigNumber, string] & {
    sender: string;
    amount: BigNumber;
    recipient: string;
  }
>;

export type CreditUnlockRateUpdatedEvent = TypedEvent<
  [string, BigNumber] & { yieldToken: string; blocks: BigNumber }
>;

export type DepositEvent = TypedEvent<
  [string, string, BigNumber, string] & {
    sender: string;
    yieldToken: string;
    amount: BigNumber;
    recipient: string;
  }
>;

export type DonateEvent = TypedEvent<
  [string, string, BigNumber] & {
    sender: string;
    yieldToken: string;
    amount: BigNumber;
  }
>;

export type HarvestEvent = TypedEvent<
  [string, BigNumber, BigNumber, BigNumber] & {
    yieldToken: string;
    minimumAmountOut: BigNumber;
    totalHarvested: BigNumber;
    credit: BigNumber;
  }
>;

export type KeeperSetEvent = TypedEvent<
  [string, boolean] & { sentinel: string; flag: boolean }
>;

export type LiquidateEvent = TypedEvent<
  [string, string, string, BigNumber, BigNumber] & {
    owner: string;
    yieldToken: string;
    underlyingToken: string;
    shares: BigNumber;
    credit: BigNumber;
  }
>;

export type LiquidationLimitUpdatedEvent = TypedEvent<
  [string, BigNumber, BigNumber] & {
    underlyingToken: string;
    maximum: BigNumber;
    blocks: BigNumber;
  }
>;

export type MaximumExpectedValueUpdatedEvent = TypedEvent<
  [string, BigNumber] & { yieldToken: string; maximumExpectedValue: BigNumber }
>;

export type MaximumLossUpdatedEvent = TypedEvent<
  [string, BigNumber] & { yieldToken: string; maximumLoss: BigNumber }
>;

export type MinimumCollateralizationUpdatedEvent = TypedEvent<
  [BigNumber] & { minimumCollateralization: BigNumber }
>;

export type MintEvent = TypedEvent<
  [string, BigNumber, string] & {
    owner: string;
    amount: BigNumber;
    recipient: string;
  }
>;

export type MintingLimitUpdatedEvent = TypedEvent<
  [BigNumber, BigNumber] & { maximum: BigNumber; blocks: BigNumber }
>;

export type PendingAdminUpdatedEvent = TypedEvent<
  [string] & { pendingAdmin: string }
>;

export type ProtocolFeeReceiverUpdatedEvent = TypedEvent<
  [string] & { protocolFeeReceiver: string }
>;

export type ProtocolFeeUpdatedEvent = TypedEvent<
  [BigNumber] & { protocolFee: BigNumber }
>;

export type RepayEvent = TypedEvent<
  [string, string, BigNumber, string, BigNumber] & {
    sender: string;
    underlyingToken: string;
    amount: BigNumber;
    recipient: string;
    credit: BigNumber;
  }
>;

export type RepayLimitUpdatedEvent = TypedEvent<
  [string, BigNumber, BigNumber] & {
    underlyingToken: string;
    maximum: BigNumber;
    blocks: BigNumber;
  }
>;

export type SentinelSetEvent = TypedEvent<
  [string, boolean] & { sentinel: string; flag: boolean }
>;

export type SnapEvent = TypedEvent<
  [string, BigNumber] & { yieldToken: string; expectedValue: BigNumber }
>;

export type SweepTokensEvent = TypedEvent<
  [string, BigNumber] & { rewardToken: string; amount: BigNumber }
>;

export type TokenAdapterUpdatedEvent = TypedEvent<
  [string, string] & { yieldToken: string; tokenAdapter: string }
>;

export type TransmuterUpdatedEvent = TypedEvent<
  [string] & { transmuter: string }
>;

export type UnderlyingTokenEnabledEvent = TypedEvent<
  [string, boolean] & { underlyingToken: string; enabled: boolean }
>;

export type WithdrawEvent = TypedEvent<
  [string, string, BigNumber, string] & {
    owner: string;
    yieldToken: string;
    shares: BigNumber;
    recipient: string;
  }
>;

export type YieldTokenEnabledEvent = TypedEvent<
  [string, boolean] & { yieldToken: string; enabled: boolean }
>;

export class AlchemistV2 extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: AlchemistV2Interface;

  functions: {
    BPS(overrides?: CallOverrides): Promise<[BigNumber]>;

    FIXED_POINT_SCALAR(overrides?: CallOverrides): Promise<[BigNumber]>;

    acceptAdmin(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    accounts(
      owner: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, string[]] & { debt: BigNumber; depositedTokens: string[] }
    >;

    addUnderlyingToken(
      underlyingToken: string,
      config: {
        repayLimitMinimum: BigNumberish;
        repayLimitMaximum: BigNumberish;
        repayLimitBlocks: BigNumberish;
        liquidationLimitMinimum: BigNumberish;
        liquidationLimitMaximum: BigNumberish;
        liquidationLimitBlocks: BigNumberish;
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    addYieldToken(
      yieldToken: string,
      config: {
        adapter: string;
        maximumLoss: BigNumberish;
        maximumExpectedValue: BigNumberish;
        creditUnlockBlocks: BigNumberish;
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    admin(overrides?: CallOverrides): Promise<[string]>;

    approveMint(
      spender: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    approveWithdraw(
      spender: string,
      yieldToken: string,
      shares: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    burn(
      amount: BigNumberish,
      recipient: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    configureCreditUnlockRate(
      yieldToken: string,
      blocks: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    configureLiquidationLimit(
      underlyingToken: string,
      maximum: BigNumberish,
      blocks: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    configureMintingLimit(
      maximum: BigNumberish,
      rate: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    configureRepayLimit(
      underlyingToken: string,
      maximum: BigNumberish,
      blocks: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    debtToken(overrides?: CallOverrides): Promise<[string]>;

    deposit(
      yieldToken: string,
      amount: BigNumberish,
      recipient: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    depositUnderlying(
      yieldToken: string,
      amount: BigNumberish,
      recipient: string,
      minimumAmountOut: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    donate(
      yieldToken: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getLiquidationLimitInfo(
      underlyingToken: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        currentLimit: BigNumber;
        rate: BigNumber;
        maximum: BigNumber;
      }
    >;

    getMintLimitInfo(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        currentLimit: BigNumber;
        rate: BigNumber;
        maximum: BigNumber;
      }
    >;

    getRepayLimitInfo(
      underlyingToken: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        currentLimit: BigNumber;
        rate: BigNumber;
        maximum: BigNumber;
      }
    >;

    getSupportedUnderlyingTokens(
      overrides?: CallOverrides
    ): Promise<[string[]]>;

    getSupportedYieldTokens(overrides?: CallOverrides): Promise<[string[]]>;

    getUnderlyingTokenParameters(
      underlyingToken: string,
      overrides?: CallOverrides
    ): Promise<
      [
        [number, BigNumber, boolean] & {
          decimals: number;
          conversionFactor: BigNumber;
          enabled: boolean;
        }
      ]
    >;

    getUnderlyingTokensPerShare(
      yieldToken: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getYieldTokenParameters(
      yieldToken: string,
      overrides?: CallOverrides
    ): Promise<
      [
        [
          number,
          string,
          string,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          boolean
        ] & {
          decimals: number;
          underlyingToken: string;
          adapter: string;
          maximumLoss: BigNumber;
          maximumExpectedValue: BigNumber;
          creditUnlockRate: BigNumber;
          activeBalance: BigNumber;
          harvestableBalance: BigNumber;
          totalShares: BigNumber;
          expectedValue: BigNumber;
          pendingCredit: BigNumber;
          distributedCredit: BigNumber;
          lastDistributionBlock: BigNumber;
          accruedWeight: BigNumber;
          enabled: boolean;
        }
      ]
    >;

    getYieldTokensPerShare(
      yieldToken: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    harvest(
      yieldToken: string,
      minimumAmountOut: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    initialize(
      params: {
        admin: string;
        debtToken: string;
        transmuter: string;
        minimumCollateralization: BigNumberish;
        protocolFee: BigNumberish;
        protocolFeeReceiver: string;
        mintingLimitMinimum: BigNumberish;
        mintingLimitMaximum: BigNumberish;
        mintingLimitBlocks: BigNumberish;
        whitelist: string;
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    isSupportedUnderlyingToken(
      underlyingToken: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    isSupportedYieldToken(
      yieldToken: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    keepers(arg0: string, overrides?: CallOverrides): Promise<[boolean]>;

    liquidate(
      yieldToken: string,
      shares: BigNumberish,
      minimumAmountOut: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    minimumCollateralization(overrides?: CallOverrides): Promise<[BigNumber]>;

    mint(
      amount: BigNumberish,
      recipient: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    mintAllowance(
      owner: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    mintFrom(
      owner: string,
      amount: BigNumberish,
      recipient: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    multicall(
      data: BytesLike[],
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    pendingAdmin(overrides?: CallOverrides): Promise<[string]>;

    poke(
      owner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    positions(
      owner: string,
      yieldToken: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        shares: BigNumber;
        lastAccruedWeight: BigNumber;
      }
    >;

    protocolFee(overrides?: CallOverrides): Promise<[BigNumber]>;

    protocolFeeReceiver(overrides?: CallOverrides): Promise<[string]>;

    repay(
      underlyingToken: string,
      amount: BigNumberish,
      recipient: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    sentinels(arg0: string, overrides?: CallOverrides): Promise<[boolean]>;

    setKeeper(
      keeper: string,
      flag: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setMaximumExpectedValue(
      yieldToken: string,
      value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setMaximumLoss(
      yieldToken: string,
      value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setMinimumCollateralization(
      value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setPendingAdmin(
      value: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setProtocolFee(
      value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setProtocolFeeReceiver(
      value: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setSentinel(
      sentinel: string,
      flag: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setTokenAdapter(
      yieldToken: string,
      adapter: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setTransmuter(
      value: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setUnderlyingTokenEnabled(
      underlyingToken: string,
      enabled: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setYieldTokenEnabled(
      yieldToken: string,
      enabled: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    snap(
      yieldToken: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    sweepTokens(
      rewardToken: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    transmuter(overrides?: CallOverrides): Promise<[string]>;

    version(overrides?: CallOverrides): Promise<[string]>;

    whitelist(overrides?: CallOverrides): Promise<[string]>;

    withdraw(
      yieldToken: string,
      shares: BigNumberish,
      recipient: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    withdrawAllowance(
      owner: string,
      spender: string,
      yieldToken: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    withdrawFrom(
      owner: string,
      yieldToken: string,
      shares: BigNumberish,
      recipient: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    withdrawUnderlying(
      yieldToken: string,
      shares: BigNumberish,
      recipient: string,
      minimumAmountOut: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    withdrawUnderlyingFrom(
      owner: string,
      yieldToken: string,
      shares: BigNumberish,
      recipient: string,
      minimumAmountOut: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  BPS(overrides?: CallOverrides): Promise<BigNumber>;

  FIXED_POINT_SCALAR(overrides?: CallOverrides): Promise<BigNumber>;

  acceptAdmin(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  accounts(
    owner: string,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, string[]] & { debt: BigNumber; depositedTokens: string[] }
  >;

  addUnderlyingToken(
    underlyingToken: string,
    config: {
      repayLimitMinimum: BigNumberish;
      repayLimitMaximum: BigNumberish;
      repayLimitBlocks: BigNumberish;
      liquidationLimitMinimum: BigNumberish;
      liquidationLimitMaximum: BigNumberish;
      liquidationLimitBlocks: BigNumberish;
    },
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  addYieldToken(
    yieldToken: string,
    config: {
      adapter: string;
      maximumLoss: BigNumberish;
      maximumExpectedValue: BigNumberish;
      creditUnlockBlocks: BigNumberish;
    },
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  admin(overrides?: CallOverrides): Promise<string>;

  approveMint(
    spender: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  approveWithdraw(
    spender: string,
    yieldToken: string,
    shares: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  burn(
    amount: BigNumberish,
    recipient: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  configureCreditUnlockRate(
    yieldToken: string,
    blocks: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  configureLiquidationLimit(
    underlyingToken: string,
    maximum: BigNumberish,
    blocks: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  configureMintingLimit(
    maximum: BigNumberish,
    rate: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  configureRepayLimit(
    underlyingToken: string,
    maximum: BigNumberish,
    blocks: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  debtToken(overrides?: CallOverrides): Promise<string>;

  deposit(
    yieldToken: string,
    amount: BigNumberish,
    recipient: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  depositUnderlying(
    yieldToken: string,
    amount: BigNumberish,
    recipient: string,
    minimumAmountOut: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  donate(
    yieldToken: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getLiquidationLimitInfo(
    underlyingToken: string,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber] & {
      currentLimit: BigNumber;
      rate: BigNumber;
      maximum: BigNumber;
    }
  >;

  getMintLimitInfo(
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber] & {
      currentLimit: BigNumber;
      rate: BigNumber;
      maximum: BigNumber;
    }
  >;

  getRepayLimitInfo(
    underlyingToken: string,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber] & {
      currentLimit: BigNumber;
      rate: BigNumber;
      maximum: BigNumber;
    }
  >;

  getSupportedUnderlyingTokens(overrides?: CallOverrides): Promise<string[]>;

  getSupportedYieldTokens(overrides?: CallOverrides): Promise<string[]>;

  getUnderlyingTokenParameters(
    underlyingToken: string,
    overrides?: CallOverrides
  ): Promise<
    [number, BigNumber, boolean] & {
      decimals: number;
      conversionFactor: BigNumber;
      enabled: boolean;
    }
  >;

  getUnderlyingTokensPerShare(
    yieldToken: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getYieldTokenParameters(
    yieldToken: string,
    overrides?: CallOverrides
  ): Promise<
    [
      number,
      string,
      string,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      boolean
    ] & {
      decimals: number;
      underlyingToken: string;
      adapter: string;
      maximumLoss: BigNumber;
      maximumExpectedValue: BigNumber;
      creditUnlockRate: BigNumber;
      activeBalance: BigNumber;
      harvestableBalance: BigNumber;
      totalShares: BigNumber;
      expectedValue: BigNumber;
      pendingCredit: BigNumber;
      distributedCredit: BigNumber;
      lastDistributionBlock: BigNumber;
      accruedWeight: BigNumber;
      enabled: boolean;
    }
  >;

  getYieldTokensPerShare(
    yieldToken: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  harvest(
    yieldToken: string,
    minimumAmountOut: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  initialize(
    params: {
      admin: string;
      debtToken: string;
      transmuter: string;
      minimumCollateralization: BigNumberish;
      protocolFee: BigNumberish;
      protocolFeeReceiver: string;
      mintingLimitMinimum: BigNumberish;
      mintingLimitMaximum: BigNumberish;
      mintingLimitBlocks: BigNumberish;
      whitelist: string;
    },
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  isSupportedUnderlyingToken(
    underlyingToken: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  isSupportedYieldToken(
    yieldToken: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  keepers(arg0: string, overrides?: CallOverrides): Promise<boolean>;

  liquidate(
    yieldToken: string,
    shares: BigNumberish,
    minimumAmountOut: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  minimumCollateralization(overrides?: CallOverrides): Promise<BigNumber>;

  mint(
    amount: BigNumberish,
    recipient: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  mintAllowance(
    owner: string,
    spender: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  mintFrom(
    owner: string,
    amount: BigNumberish,
    recipient: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  multicall(
    data: BytesLike[],
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  pendingAdmin(overrides?: CallOverrides): Promise<string>;

  poke(
    owner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  positions(
    owner: string,
    yieldToken: string,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber] & { shares: BigNumber; lastAccruedWeight: BigNumber }
  >;

  protocolFee(overrides?: CallOverrides): Promise<BigNumber>;

  protocolFeeReceiver(overrides?: CallOverrides): Promise<string>;

  repay(
    underlyingToken: string,
    amount: BigNumberish,
    recipient: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  sentinels(arg0: string, overrides?: CallOverrides): Promise<boolean>;

  setKeeper(
    keeper: string,
    flag: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setMaximumExpectedValue(
    yieldToken: string,
    value: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setMaximumLoss(
    yieldToken: string,
    value: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setMinimumCollateralization(
    value: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setPendingAdmin(
    value: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setProtocolFee(
    value: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setProtocolFeeReceiver(
    value: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setSentinel(
    sentinel: string,
    flag: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setTokenAdapter(
    yieldToken: string,
    adapter: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setTransmuter(
    value: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setUnderlyingTokenEnabled(
    underlyingToken: string,
    enabled: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setYieldTokenEnabled(
    yieldToken: string,
    enabled: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  snap(
    yieldToken: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  sweepTokens(
    rewardToken: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  transmuter(overrides?: CallOverrides): Promise<string>;

  version(overrides?: CallOverrides): Promise<string>;

  whitelist(overrides?: CallOverrides): Promise<string>;

  withdraw(
    yieldToken: string,
    shares: BigNumberish,
    recipient: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  withdrawAllowance(
    owner: string,
    spender: string,
    yieldToken: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  withdrawFrom(
    owner: string,
    yieldToken: string,
    shares: BigNumberish,
    recipient: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  withdrawUnderlying(
    yieldToken: string,
    shares: BigNumberish,
    recipient: string,
    minimumAmountOut: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  withdrawUnderlyingFrom(
    owner: string,
    yieldToken: string,
    shares: BigNumberish,
    recipient: string,
    minimumAmountOut: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    BPS(overrides?: CallOverrides): Promise<BigNumber>;

    FIXED_POINT_SCALAR(overrides?: CallOverrides): Promise<BigNumber>;

    acceptAdmin(overrides?: CallOverrides): Promise<void>;

    accounts(
      owner: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, string[]] & { debt: BigNumber; depositedTokens: string[] }
    >;

    addUnderlyingToken(
      underlyingToken: string,
      config: {
        repayLimitMinimum: BigNumberish;
        repayLimitMaximum: BigNumberish;
        repayLimitBlocks: BigNumberish;
        liquidationLimitMinimum: BigNumberish;
        liquidationLimitMaximum: BigNumberish;
        liquidationLimitBlocks: BigNumberish;
      },
      overrides?: CallOverrides
    ): Promise<void>;

    addYieldToken(
      yieldToken: string,
      config: {
        adapter: string;
        maximumLoss: BigNumberish;
        maximumExpectedValue: BigNumberish;
        creditUnlockBlocks: BigNumberish;
      },
      overrides?: CallOverrides
    ): Promise<void>;

    admin(overrides?: CallOverrides): Promise<string>;

    approveMint(
      spender: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    approveWithdraw(
      spender: string,
      yieldToken: string,
      shares: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    burn(
      amount: BigNumberish,
      recipient: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    configureCreditUnlockRate(
      yieldToken: string,
      blocks: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    configureLiquidationLimit(
      underlyingToken: string,
      maximum: BigNumberish,
      blocks: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    configureMintingLimit(
      maximum: BigNumberish,
      rate: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    configureRepayLimit(
      underlyingToken: string,
      maximum: BigNumberish,
      blocks: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    debtToken(overrides?: CallOverrides): Promise<string>;

    deposit(
      yieldToken: string,
      amount: BigNumberish,
      recipient: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    depositUnderlying(
      yieldToken: string,
      amount: BigNumberish,
      recipient: string,
      minimumAmountOut: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    donate(
      yieldToken: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    getLiquidationLimitInfo(
      underlyingToken: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        currentLimit: BigNumber;
        rate: BigNumber;
        maximum: BigNumber;
      }
    >;

    getMintLimitInfo(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        currentLimit: BigNumber;
        rate: BigNumber;
        maximum: BigNumber;
      }
    >;

    getRepayLimitInfo(
      underlyingToken: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        currentLimit: BigNumber;
        rate: BigNumber;
        maximum: BigNumber;
      }
    >;

    getSupportedUnderlyingTokens(overrides?: CallOverrides): Promise<string[]>;

    getSupportedYieldTokens(overrides?: CallOverrides): Promise<string[]>;

    getUnderlyingTokenParameters(
      underlyingToken: string,
      overrides?: CallOverrides
    ): Promise<
      [number, BigNumber, boolean] & {
        decimals: number;
        conversionFactor: BigNumber;
        enabled: boolean;
      }
    >;

    getUnderlyingTokensPerShare(
      yieldToken: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getYieldTokenParameters(
      yieldToken: string,
      overrides?: CallOverrides
    ): Promise<
      [
        number,
        string,
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        boolean
      ] & {
        decimals: number;
        underlyingToken: string;
        adapter: string;
        maximumLoss: BigNumber;
        maximumExpectedValue: BigNumber;
        creditUnlockRate: BigNumber;
        activeBalance: BigNumber;
        harvestableBalance: BigNumber;
        totalShares: BigNumber;
        expectedValue: BigNumber;
        pendingCredit: BigNumber;
        distributedCredit: BigNumber;
        lastDistributionBlock: BigNumber;
        accruedWeight: BigNumber;
        enabled: boolean;
      }
    >;

    getYieldTokensPerShare(
      yieldToken: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    harvest(
      yieldToken: string,
      minimumAmountOut: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    initialize(
      params: {
        admin: string;
        debtToken: string;
        transmuter: string;
        minimumCollateralization: BigNumberish;
        protocolFee: BigNumberish;
        protocolFeeReceiver: string;
        mintingLimitMinimum: BigNumberish;
        mintingLimitMaximum: BigNumberish;
        mintingLimitBlocks: BigNumberish;
        whitelist: string;
      },
      overrides?: CallOverrides
    ): Promise<void>;

    isSupportedUnderlyingToken(
      underlyingToken: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isSupportedYieldToken(
      yieldToken: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    keepers(arg0: string, overrides?: CallOverrides): Promise<boolean>;

    liquidate(
      yieldToken: string,
      shares: BigNumberish,
      minimumAmountOut: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    minimumCollateralization(overrides?: CallOverrides): Promise<BigNumber>;

    mint(
      amount: BigNumberish,
      recipient: string,
      overrides?: CallOverrides
    ): Promise<void>;

    mintAllowance(
      owner: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    mintFrom(
      owner: string,
      amount: BigNumberish,
      recipient: string,
      overrides?: CallOverrides
    ): Promise<void>;

    multicall(data: BytesLike[], overrides?: CallOverrides): Promise<string[]>;

    pendingAdmin(overrides?: CallOverrides): Promise<string>;

    poke(owner: string, overrides?: CallOverrides): Promise<void>;

    positions(
      owner: string,
      yieldToken: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        shares: BigNumber;
        lastAccruedWeight: BigNumber;
      }
    >;

    protocolFee(overrides?: CallOverrides): Promise<BigNumber>;

    protocolFeeReceiver(overrides?: CallOverrides): Promise<string>;

    repay(
      underlyingToken: string,
      amount: BigNumberish,
      recipient: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    sentinels(arg0: string, overrides?: CallOverrides): Promise<boolean>;

    setKeeper(
      keeper: string,
      flag: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    setMaximumExpectedValue(
      yieldToken: string,
      value: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setMaximumLoss(
      yieldToken: string,
      value: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setMinimumCollateralization(
      value: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setPendingAdmin(value: string, overrides?: CallOverrides): Promise<void>;

    setProtocolFee(
      value: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setProtocolFeeReceiver(
      value: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setSentinel(
      sentinel: string,
      flag: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    setTokenAdapter(
      yieldToken: string,
      adapter: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setTransmuter(value: string, overrides?: CallOverrides): Promise<void>;

    setUnderlyingTokenEnabled(
      underlyingToken: string,
      enabled: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    setYieldTokenEnabled(
      yieldToken: string,
      enabled: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    snap(yieldToken: string, overrides?: CallOverrides): Promise<void>;

    sweepTokens(
      rewardToken: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    transmuter(overrides?: CallOverrides): Promise<string>;

    version(overrides?: CallOverrides): Promise<string>;

    whitelist(overrides?: CallOverrides): Promise<string>;

    withdraw(
      yieldToken: string,
      shares: BigNumberish,
      recipient: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    withdrawAllowance(
      owner: string,
      spender: string,
      yieldToken: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    withdrawFrom(
      owner: string,
      yieldToken: string,
      shares: BigNumberish,
      recipient: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    withdrawUnderlying(
      yieldToken: string,
      shares: BigNumberish,
      recipient: string,
      minimumAmountOut: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    withdrawUnderlyingFrom(
      owner: string,
      yieldToken: string,
      shares: BigNumberish,
      recipient: string,
      minimumAmountOut: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  filters: {
    "AddUnderlyingToken(address)"(
      underlyingToken?: string | null
    ): TypedEventFilter<[string], { underlyingToken: string }>;

    AddUnderlyingToken(
      underlyingToken?: string | null
    ): TypedEventFilter<[string], { underlyingToken: string }>;

    "AddYieldToken(address)"(
      yieldToken?: string | null
    ): TypedEventFilter<[string], { yieldToken: string }>;

    AddYieldToken(
      yieldToken?: string | null
    ): TypedEventFilter<[string], { yieldToken: string }>;

    "AdminUpdated(address)"(
      admin?: null
    ): TypedEventFilter<[string], { admin: string }>;

    AdminUpdated(admin?: null): TypedEventFilter<[string], { admin: string }>;

    "ApproveMint(address,address,uint256)"(
      owner?: string | null,
      spender?: string | null,
      amount?: null
    ): TypedEventFilter<
      [string, string, BigNumber],
      { owner: string; spender: string; amount: BigNumber }
    >;

    ApproveMint(
      owner?: string | null,
      spender?: string | null,
      amount?: null
    ): TypedEventFilter<
      [string, string, BigNumber],
      { owner: string; spender: string; amount: BigNumber }
    >;

    "ApproveWithdraw(address,address,address,uint256)"(
      owner?: string | null,
      spender?: string | null,
      yieldToken?: string | null,
      amount?: null
    ): TypedEventFilter<
      [string, string, string, BigNumber],
      { owner: string; spender: string; yieldToken: string; amount: BigNumber }
    >;

    ApproveWithdraw(
      owner?: string | null,
      spender?: string | null,
      yieldToken?: string | null,
      amount?: null
    ): TypedEventFilter<
      [string, string, string, BigNumber],
      { owner: string; spender: string; yieldToken: string; amount: BigNumber }
    >;

    "Burn(address,uint256,address)"(
      sender?: string | null,
      amount?: null,
      recipient?: null
    ): TypedEventFilter<
      [string, BigNumber, string],
      { sender: string; amount: BigNumber; recipient: string }
    >;

    Burn(
      sender?: string | null,
      amount?: null,
      recipient?: null
    ): TypedEventFilter<
      [string, BigNumber, string],
      { sender: string; amount: BigNumber; recipient: string }
    >;

    "CreditUnlockRateUpdated(address,uint256)"(
      yieldToken?: null,
      blocks?: null
    ): TypedEventFilter<
      [string, BigNumber],
      { yieldToken: string; blocks: BigNumber }
    >;

    CreditUnlockRateUpdated(
      yieldToken?: null,
      blocks?: null
    ): TypedEventFilter<
      [string, BigNumber],
      { yieldToken: string; blocks: BigNumber }
    >;

    "Deposit(address,address,uint256,address)"(
      sender?: string | null,
      yieldToken?: string | null,
      amount?: null,
      recipient?: null
    ): TypedEventFilter<
      [string, string, BigNumber, string],
      {
        sender: string;
        yieldToken: string;
        amount: BigNumber;
        recipient: string;
      }
    >;

    Deposit(
      sender?: string | null,
      yieldToken?: string | null,
      amount?: null,
      recipient?: null
    ): TypedEventFilter<
      [string, string, BigNumber, string],
      {
        sender: string;
        yieldToken: string;
        amount: BigNumber;
        recipient: string;
      }
    >;

    "Donate(address,address,uint256)"(
      sender?: string | null,
      yieldToken?: string | null,
      amount?: null
    ): TypedEventFilter<
      [string, string, BigNumber],
      { sender: string; yieldToken: string; amount: BigNumber }
    >;

    Donate(
      sender?: string | null,
      yieldToken?: string | null,
      amount?: null
    ): TypedEventFilter<
      [string, string, BigNumber],
      { sender: string; yieldToken: string; amount: BigNumber }
    >;

    "Harvest(address,uint256,uint256,uint256)"(
      yieldToken?: string | null,
      minimumAmountOut?: null,
      totalHarvested?: null,
      credit?: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber, BigNumber],
      {
        yieldToken: string;
        minimumAmountOut: BigNumber;
        totalHarvested: BigNumber;
        credit: BigNumber;
      }
    >;

    Harvest(
      yieldToken?: string | null,
      minimumAmountOut?: null,
      totalHarvested?: null,
      credit?: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber, BigNumber],
      {
        yieldToken: string;
        minimumAmountOut: BigNumber;
        totalHarvested: BigNumber;
        credit: BigNumber;
      }
    >;

    "KeeperSet(address,bool)"(
      sentinel?: null,
      flag?: null
    ): TypedEventFilter<[string, boolean], { sentinel: string; flag: boolean }>;

    KeeperSet(
      sentinel?: null,
      flag?: null
    ): TypedEventFilter<[string, boolean], { sentinel: string; flag: boolean }>;

    "Liquidate(address,address,address,uint256,uint256)"(
      owner?: string | null,
      yieldToken?: string | null,
      underlyingToken?: string | null,
      shares?: null,
      credit?: null
    ): TypedEventFilter<
      [string, string, string, BigNumber, BigNumber],
      {
        owner: string;
        yieldToken: string;
        underlyingToken: string;
        shares: BigNumber;
        credit: BigNumber;
      }
    >;

    Liquidate(
      owner?: string | null,
      yieldToken?: string | null,
      underlyingToken?: string | null,
      shares?: null,
      credit?: null
    ): TypedEventFilter<
      [string, string, string, BigNumber, BigNumber],
      {
        owner: string;
        yieldToken: string;
        underlyingToken: string;
        shares: BigNumber;
        credit: BigNumber;
      }
    >;

    "LiquidationLimitUpdated(address,uint256,uint256)"(
      underlyingToken?: string | null,
      maximum?: null,
      blocks?: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber],
      { underlyingToken: string; maximum: BigNumber; blocks: BigNumber }
    >;

    LiquidationLimitUpdated(
      underlyingToken?: string | null,
      maximum?: null,
      blocks?: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber],
      { underlyingToken: string; maximum: BigNumber; blocks: BigNumber }
    >;

    "MaximumExpectedValueUpdated(address,uint256)"(
      yieldToken?: string | null,
      maximumExpectedValue?: null
    ): TypedEventFilter<
      [string, BigNumber],
      { yieldToken: string; maximumExpectedValue: BigNumber }
    >;

    MaximumExpectedValueUpdated(
      yieldToken?: string | null,
      maximumExpectedValue?: null
    ): TypedEventFilter<
      [string, BigNumber],
      { yieldToken: string; maximumExpectedValue: BigNumber }
    >;

    "MaximumLossUpdated(address,uint256)"(
      yieldToken?: string | null,
      maximumLoss?: null
    ): TypedEventFilter<
      [string, BigNumber],
      { yieldToken: string; maximumLoss: BigNumber }
    >;

    MaximumLossUpdated(
      yieldToken?: string | null,
      maximumLoss?: null
    ): TypedEventFilter<
      [string, BigNumber],
      { yieldToken: string; maximumLoss: BigNumber }
    >;

    "MinimumCollateralizationUpdated(uint256)"(
      minimumCollateralization?: null
    ): TypedEventFilter<[BigNumber], { minimumCollateralization: BigNumber }>;

    MinimumCollateralizationUpdated(
      minimumCollateralization?: null
    ): TypedEventFilter<[BigNumber], { minimumCollateralization: BigNumber }>;

    "Mint(address,uint256,address)"(
      owner?: string | null,
      amount?: null,
      recipient?: null
    ): TypedEventFilter<
      [string, BigNumber, string],
      { owner: string; amount: BigNumber; recipient: string }
    >;

    Mint(
      owner?: string | null,
      amount?: null,
      recipient?: null
    ): TypedEventFilter<
      [string, BigNumber, string],
      { owner: string; amount: BigNumber; recipient: string }
    >;

    "MintingLimitUpdated(uint256,uint256)"(
      maximum?: null,
      blocks?: null
    ): TypedEventFilter<
      [BigNumber, BigNumber],
      { maximum: BigNumber; blocks: BigNumber }
    >;

    MintingLimitUpdated(
      maximum?: null,
      blocks?: null
    ): TypedEventFilter<
      [BigNumber, BigNumber],
      { maximum: BigNumber; blocks: BigNumber }
    >;

    "PendingAdminUpdated(address)"(
      pendingAdmin?: null
    ): TypedEventFilter<[string], { pendingAdmin: string }>;

    PendingAdminUpdated(
      pendingAdmin?: null
    ): TypedEventFilter<[string], { pendingAdmin: string }>;

    "ProtocolFeeReceiverUpdated(address)"(
      protocolFeeReceiver?: null
    ): TypedEventFilter<[string], { protocolFeeReceiver: string }>;

    ProtocolFeeReceiverUpdated(
      protocolFeeReceiver?: null
    ): TypedEventFilter<[string], { protocolFeeReceiver: string }>;

    "ProtocolFeeUpdated(uint256)"(
      protocolFee?: null
    ): TypedEventFilter<[BigNumber], { protocolFee: BigNumber }>;

    ProtocolFeeUpdated(
      protocolFee?: null
    ): TypedEventFilter<[BigNumber], { protocolFee: BigNumber }>;

    "Repay(address,address,uint256,address,uint256)"(
      sender?: string | null,
      underlyingToken?: string | null,
      amount?: null,
      recipient?: null,
      credit?: null
    ): TypedEventFilter<
      [string, string, BigNumber, string, BigNumber],
      {
        sender: string;
        underlyingToken: string;
        amount: BigNumber;
        recipient: string;
        credit: BigNumber;
      }
    >;

    Repay(
      sender?: string | null,
      underlyingToken?: string | null,
      amount?: null,
      recipient?: null,
      credit?: null
    ): TypedEventFilter<
      [string, string, BigNumber, string, BigNumber],
      {
        sender: string;
        underlyingToken: string;
        amount: BigNumber;
        recipient: string;
        credit: BigNumber;
      }
    >;

    "RepayLimitUpdated(address,uint256,uint256)"(
      underlyingToken?: string | null,
      maximum?: null,
      blocks?: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber],
      { underlyingToken: string; maximum: BigNumber; blocks: BigNumber }
    >;

    RepayLimitUpdated(
      underlyingToken?: string | null,
      maximum?: null,
      blocks?: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber],
      { underlyingToken: string; maximum: BigNumber; blocks: BigNumber }
    >;

    "SentinelSet(address,bool)"(
      sentinel?: null,
      flag?: null
    ): TypedEventFilter<[string, boolean], { sentinel: string; flag: boolean }>;

    SentinelSet(
      sentinel?: null,
      flag?: null
    ): TypedEventFilter<[string, boolean], { sentinel: string; flag: boolean }>;

    "Snap(address,uint256)"(
      yieldToken?: string | null,
      expectedValue?: null
    ): TypedEventFilter<
      [string, BigNumber],
      { yieldToken: string; expectedValue: BigNumber }
    >;

    Snap(
      yieldToken?: string | null,
      expectedValue?: null
    ): TypedEventFilter<
      [string, BigNumber],
      { yieldToken: string; expectedValue: BigNumber }
    >;

    "SweepTokens(address,uint256)"(
      rewardToken?: string | null,
      amount?: null
    ): TypedEventFilter<
      [string, BigNumber],
      { rewardToken: string; amount: BigNumber }
    >;

    SweepTokens(
      rewardToken?: string | null,
      amount?: null
    ): TypedEventFilter<
      [string, BigNumber],
      { rewardToken: string; amount: BigNumber }
    >;

    "TokenAdapterUpdated(address,address)"(
      yieldToken?: null,
      tokenAdapter?: null
    ): TypedEventFilter<
      [string, string],
      { yieldToken: string; tokenAdapter: string }
    >;

    TokenAdapterUpdated(
      yieldToken?: null,
      tokenAdapter?: null
    ): TypedEventFilter<
      [string, string],
      { yieldToken: string; tokenAdapter: string }
    >;

    "TransmuterUpdated(address)"(
      transmuter?: null
    ): TypedEventFilter<[string], { transmuter: string }>;

    TransmuterUpdated(
      transmuter?: null
    ): TypedEventFilter<[string], { transmuter: string }>;

    "UnderlyingTokenEnabled(address,bool)"(
      underlyingToken?: string | null,
      enabled?: null
    ): TypedEventFilter<
      [string, boolean],
      { underlyingToken: string; enabled: boolean }
    >;

    UnderlyingTokenEnabled(
      underlyingToken?: string | null,
      enabled?: null
    ): TypedEventFilter<
      [string, boolean],
      { underlyingToken: string; enabled: boolean }
    >;

    "Withdraw(address,address,uint256,address)"(
      owner?: string | null,
      yieldToken?: string | null,
      shares?: null,
      recipient?: null
    ): TypedEventFilter<
      [string, string, BigNumber, string],
      {
        owner: string;
        yieldToken: string;
        shares: BigNumber;
        recipient: string;
      }
    >;

    Withdraw(
      owner?: string | null,
      yieldToken?: string | null,
      shares?: null,
      recipient?: null
    ): TypedEventFilter<
      [string, string, BigNumber, string],
      {
        owner: string;
        yieldToken: string;
        shares: BigNumber;
        recipient: string;
      }
    >;

    "YieldTokenEnabled(address,bool)"(
      yieldToken?: string | null,
      enabled?: null
    ): TypedEventFilter<
      [string, boolean],
      { yieldToken: string; enabled: boolean }
    >;

    YieldTokenEnabled(
      yieldToken?: string | null,
      enabled?: null
    ): TypedEventFilter<
      [string, boolean],
      { yieldToken: string; enabled: boolean }
    >;
  };

  estimateGas: {
    BPS(overrides?: CallOverrides): Promise<BigNumber>;

    FIXED_POINT_SCALAR(overrides?: CallOverrides): Promise<BigNumber>;

    acceptAdmin(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    accounts(owner: string, overrides?: CallOverrides): Promise<BigNumber>;

    addUnderlyingToken(
      underlyingToken: string,
      config: {
        repayLimitMinimum: BigNumberish;
        repayLimitMaximum: BigNumberish;
        repayLimitBlocks: BigNumberish;
        liquidationLimitMinimum: BigNumberish;
        liquidationLimitMaximum: BigNumberish;
        liquidationLimitBlocks: BigNumberish;
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    addYieldToken(
      yieldToken: string,
      config: {
        adapter: string;
        maximumLoss: BigNumberish;
        maximumExpectedValue: BigNumberish;
        creditUnlockBlocks: BigNumberish;
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    admin(overrides?: CallOverrides): Promise<BigNumber>;

    approveMint(
      spender: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    approveWithdraw(
      spender: string,
      yieldToken: string,
      shares: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    burn(
      amount: BigNumberish,
      recipient: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    configureCreditUnlockRate(
      yieldToken: string,
      blocks: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    configureLiquidationLimit(
      underlyingToken: string,
      maximum: BigNumberish,
      blocks: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    configureMintingLimit(
      maximum: BigNumberish,
      rate: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    configureRepayLimit(
      underlyingToken: string,
      maximum: BigNumberish,
      blocks: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    debtToken(overrides?: CallOverrides): Promise<BigNumber>;

    deposit(
      yieldToken: string,
      amount: BigNumberish,
      recipient: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    depositUnderlying(
      yieldToken: string,
      amount: BigNumberish,
      recipient: string,
      minimumAmountOut: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    donate(
      yieldToken: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getLiquidationLimitInfo(
      underlyingToken: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getMintLimitInfo(overrides?: CallOverrides): Promise<BigNumber>;

    getRepayLimitInfo(
      underlyingToken: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getSupportedUnderlyingTokens(overrides?: CallOverrides): Promise<BigNumber>;

    getSupportedYieldTokens(overrides?: CallOverrides): Promise<BigNumber>;

    getUnderlyingTokenParameters(
      underlyingToken: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getUnderlyingTokensPerShare(
      yieldToken: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getYieldTokenParameters(
      yieldToken: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getYieldTokensPerShare(
      yieldToken: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    harvest(
      yieldToken: string,
      minimumAmountOut: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    initialize(
      params: {
        admin: string;
        debtToken: string;
        transmuter: string;
        minimumCollateralization: BigNumberish;
        protocolFee: BigNumberish;
        protocolFeeReceiver: string;
        mintingLimitMinimum: BigNumberish;
        mintingLimitMaximum: BigNumberish;
        mintingLimitBlocks: BigNumberish;
        whitelist: string;
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    isSupportedUnderlyingToken(
      underlyingToken: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isSupportedYieldToken(
      yieldToken: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    keepers(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    liquidate(
      yieldToken: string,
      shares: BigNumberish,
      minimumAmountOut: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    minimumCollateralization(overrides?: CallOverrides): Promise<BigNumber>;

    mint(
      amount: BigNumberish,
      recipient: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    mintAllowance(
      owner: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    mintFrom(
      owner: string,
      amount: BigNumberish,
      recipient: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    multicall(
      data: BytesLike[],
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    pendingAdmin(overrides?: CallOverrides): Promise<BigNumber>;

    poke(
      owner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    positions(
      owner: string,
      yieldToken: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    protocolFee(overrides?: CallOverrides): Promise<BigNumber>;

    protocolFeeReceiver(overrides?: CallOverrides): Promise<BigNumber>;

    repay(
      underlyingToken: string,
      amount: BigNumberish,
      recipient: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    sentinels(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    setKeeper(
      keeper: string,
      flag: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setMaximumExpectedValue(
      yieldToken: string,
      value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setMaximumLoss(
      yieldToken: string,
      value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setMinimumCollateralization(
      value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setPendingAdmin(
      value: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setProtocolFee(
      value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setProtocolFeeReceiver(
      value: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setSentinel(
      sentinel: string,
      flag: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setTokenAdapter(
      yieldToken: string,
      adapter: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setTransmuter(
      value: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setUnderlyingTokenEnabled(
      underlyingToken: string,
      enabled: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setYieldTokenEnabled(
      yieldToken: string,
      enabled: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    snap(
      yieldToken: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    sweepTokens(
      rewardToken: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    transmuter(overrides?: CallOverrides): Promise<BigNumber>;

    version(overrides?: CallOverrides): Promise<BigNumber>;

    whitelist(overrides?: CallOverrides): Promise<BigNumber>;

    withdraw(
      yieldToken: string,
      shares: BigNumberish,
      recipient: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    withdrawAllowance(
      owner: string,
      spender: string,
      yieldToken: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    withdrawFrom(
      owner: string,
      yieldToken: string,
      shares: BigNumberish,
      recipient: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    withdrawUnderlying(
      yieldToken: string,
      shares: BigNumberish,
      recipient: string,
      minimumAmountOut: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    withdrawUnderlyingFrom(
      owner: string,
      yieldToken: string,
      shares: BigNumberish,
      recipient: string,
      minimumAmountOut: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    BPS(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    FIXED_POINT_SCALAR(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    acceptAdmin(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    accounts(
      owner: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    addUnderlyingToken(
      underlyingToken: string,
      config: {
        repayLimitMinimum: BigNumberish;
        repayLimitMaximum: BigNumberish;
        repayLimitBlocks: BigNumberish;
        liquidationLimitMinimum: BigNumberish;
        liquidationLimitMaximum: BigNumberish;
        liquidationLimitBlocks: BigNumberish;
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    addYieldToken(
      yieldToken: string,
      config: {
        adapter: string;
        maximumLoss: BigNumberish;
        maximumExpectedValue: BigNumberish;
        creditUnlockBlocks: BigNumberish;
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    admin(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    approveMint(
      spender: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    approveWithdraw(
      spender: string,
      yieldToken: string,
      shares: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    burn(
      amount: BigNumberish,
      recipient: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    configureCreditUnlockRate(
      yieldToken: string,
      blocks: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    configureLiquidationLimit(
      underlyingToken: string,
      maximum: BigNumberish,
      blocks: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    configureMintingLimit(
      maximum: BigNumberish,
      rate: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    configureRepayLimit(
      underlyingToken: string,
      maximum: BigNumberish,
      blocks: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    debtToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    deposit(
      yieldToken: string,
      amount: BigNumberish,
      recipient: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    depositUnderlying(
      yieldToken: string,
      amount: BigNumberish,
      recipient: string,
      minimumAmountOut: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    donate(
      yieldToken: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getLiquidationLimitInfo(
      underlyingToken: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getMintLimitInfo(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getRepayLimitInfo(
      underlyingToken: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getSupportedUnderlyingTokens(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getSupportedYieldTokens(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getUnderlyingTokenParameters(
      underlyingToken: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getUnderlyingTokensPerShare(
      yieldToken: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getYieldTokenParameters(
      yieldToken: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getYieldTokensPerShare(
      yieldToken: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    harvest(
      yieldToken: string,
      minimumAmountOut: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    initialize(
      params: {
        admin: string;
        debtToken: string;
        transmuter: string;
        minimumCollateralization: BigNumberish;
        protocolFee: BigNumberish;
        protocolFeeReceiver: string;
        mintingLimitMinimum: BigNumberish;
        mintingLimitMaximum: BigNumberish;
        mintingLimitBlocks: BigNumberish;
        whitelist: string;
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    isSupportedUnderlyingToken(
      underlyingToken: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isSupportedYieldToken(
      yieldToken: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    keepers(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    liquidate(
      yieldToken: string,
      shares: BigNumberish,
      minimumAmountOut: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    minimumCollateralization(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    mint(
      amount: BigNumberish,
      recipient: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    mintAllowance(
      owner: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    mintFrom(
      owner: string,
      amount: BigNumberish,
      recipient: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    multicall(
      data: BytesLike[],
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    pendingAdmin(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    poke(
      owner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    positions(
      owner: string,
      yieldToken: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    protocolFee(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    protocolFeeReceiver(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    repay(
      underlyingToken: string,
      amount: BigNumberish,
      recipient: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    sentinels(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    setKeeper(
      keeper: string,
      flag: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setMaximumExpectedValue(
      yieldToken: string,
      value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setMaximumLoss(
      yieldToken: string,
      value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setMinimumCollateralization(
      value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setPendingAdmin(
      value: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setProtocolFee(
      value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setProtocolFeeReceiver(
      value: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setSentinel(
      sentinel: string,
      flag: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setTokenAdapter(
      yieldToken: string,
      adapter: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setTransmuter(
      value: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setUnderlyingTokenEnabled(
      underlyingToken: string,
      enabled: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setYieldTokenEnabled(
      yieldToken: string,
      enabled: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    snap(
      yieldToken: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    sweepTokens(
      rewardToken: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    transmuter(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    version(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    whitelist(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    withdraw(
      yieldToken: string,
      shares: BigNumberish,
      recipient: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    withdrawAllowance(
      owner: string,
      spender: string,
      yieldToken: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    withdrawFrom(
      owner: string,
      yieldToken: string,
      shares: BigNumberish,
      recipient: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    withdrawUnderlying(
      yieldToken: string,
      shares: BigNumberish,
      recipient: string,
      minimumAmountOut: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    withdrawUnderlyingFrom(
      owner: string,
      yieldToken: string,
      shares: BigNumberish,
      recipient: string,
      minimumAmountOut: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
