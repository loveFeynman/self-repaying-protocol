/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  Signer,
  utils,
  BigNumberish,
  Contract,
  ContractFactory,
  Overrides,
} from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  TestAlchemicToken,
  TestAlchemicTokenInterface,
} from "../TestAlchemicToken";

const _abi = [
  {
    inputs: [
      {
        internalType: "uint256",
        name: "amountToMint",
        type: "uint256",
      },
      {
        internalType: "uint8",
        name: "_decimals",
        type: "uint8",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "owner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "spender",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "Approval",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "owner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "recipient",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "Transfer",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "allowance",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "spender",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "approve",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "balanceOf",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "burn",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "owner",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "burnFrom",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "decimals",
    outputs: [
      {
        internalType: "uint8",
        name: "",
        type: "uint8",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "account",
        type: "address",
      },
    ],
    name: "hasMinted",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "lowerHasMinted",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "mint",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "totalSupply",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "recipient",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "transfer",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "sender",
        type: "address",
      },
      {
        internalType: "address",
        name: "recipient",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "transferFrom",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b50604051610a84380380610a8483398101604081905261002f916100ff565b6001805460ff191660ff8316179055818161004a3383610054565b505050505061015b565b6001600160a01b038216600090815260026020526040812054819061007a908490610135565b9050828110156100c35760405162461bcd60e51b815260206004820152601060248201526f6f766572666c6f772062616c616e636560801b604482015260640160405180910390fd5b6001600160a01b0384166000908152600260205260408120829055805484919081906100f0908490610135565b90915550600195945050505050565b6000806040838503121561011257600080fd5b82519150602083015160ff8116811461012a57600080fd5b809150509250929050565b6000821982111561015657634e487b7160e01b600052601160045260246000fd5b500190565b61091a8061016a6000396000f3fe608060405234801561001057600080fd5b50600436106100a45760003560e01c8063095ea7b3146100a957806318160ddd146100d157806323b872dd146100e8578063288aafcb146100fb578063313ce5671461010e57806338e21cce1461012d57806340c10f191461014157806342966c681461015457806370a082311461016757806379cc679014610187578063a9059cbb1461019a578063dd62ed3e146101ad575b600080fd5b6100bc6100b7366004610747565b6101d8565b60405190151581526020015b60405180910390f35b6100da60005481565b6040519081526020016100c8565b6100bc6100f6366004610771565b610244565b61010c6101093660046107ad565b50565b005b60015461011b9060ff1681565b60405160ff90911681526020016100c8565b6100da61013b3660046107c6565b50600090565b6100bc61014f366004610747565b6103cd565b6100bc6101623660046107ad565b610474565b6100da6101753660046107c6565b60026020526000908152604090205481565b6100bc610195366004610747565b6104fb565b6100bc6101a8366004610747565b610609565b6100da6101bb3660046107e8565b600360209081526000928352604080842090915290825290205481565b3360008181526003602090815260408083206001600160a01b038716808552925280832085905551919290917f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925906102339086815260200190565b60405180910390a350600192915050565b6001600160a01b0383166000908152600360209081526040808320338452909152812054828110156102915760405162461bcd60e51b81526004016102889061081b565b60405180910390fd5b61029b8382610861565b6001600160a01b038087166000908152600360209081526040808320338452825280832094909455918716815260029091522054806102da8582610878565b10156102f85760405162461bcd60e51b815260040161028890610890565b6103028482610878565b6001600160a01b038087166000908152600260205260408082209390935590881681522054848110156103725760405162461bcd60e51b81526020600482015260186024820152773ab73232b9333637bb903130b630b731b29039b2b73232b960411b6044820152606401610288565b61037c8582610861565b6001600160a01b0388811660008181526002602090815260409182902094909455518881529189169290916000805160206108c5833981519152910160405180910390a35060019695505050505050565b6001600160a01b03821660009081526002602052604081205481906103f3908490610878565b9050828110156104385760405162461bcd60e51b815260206004820152601060248201526f6f766572666c6f772062616c616e636560801b6044820152606401610288565b6001600160a01b038416600090815260026020526040812082905580548491908190610465908490610878565b90915550600195945050505050565b33600090815260026020526040812054828110156104a45760405162461bcd60e51b815260040161028890610890565b6104ae8382610861565b33600090815260026020526040812091909155805484919081906104d3908490610861565b909155505060405183815260009033906000805160206108c583398151915290602001610233565b6001600160a01b03821660009081526003602090815260408083203384529091528120548281101561053f5760405162461bcd60e51b81526004016102889061081b565b6105498382610861565b6001600160a01b0385166000818152600360209081526040808320338452825280832094909455918152600290915220548381101561059a5760405162461bcd60e51b815260040161028890610890565b6105a48482610861565b6001600160a01b038616600090815260026020526040812091909155805485919081906105d2908490610861565b909155505060405184815260009033906000805160206108c5833981519152906020015b60405180910390a3506001949350505050565b33600090815260026020526040812054828110156106605760405162461bcd60e51b8152602060048201526014602482015273696e73756666696369656e742062616c616e636560601b6044820152606401610288565b61066a8382610861565b33600090815260026020526040808220929092556001600160a01b03861681522054806106978582610878565b10156106e25760405162461bcd60e51b815260206004820152601a602482015279726563697069656e742062616c616e6365206f766572666c6f7760301b6044820152606401610288565b6106ec8482610878565b6001600160a01b0386166000818152600260205260409081902092909255905133906000805160206108c5833981519152906105f69088815260200190565b80356001600160a01b038116811461074257600080fd5b919050565b6000806040838503121561075a57600080fd5b6107638361072b565b946020939093013593505050565b60008060006060848603121561078657600080fd5b61078f8461072b565b925061079d6020850161072b565b9150604084013590509250925092565b6000602082840312156107bf57600080fd5b5035919050565b6000602082840312156107d857600080fd5b6107e18261072b565b9392505050565b600080604083850312156107fb57600080fd5b6108048361072b565b91506108126020840161072b565b90509250929050565b602080825260169082015275185b1b1bddd85b98d9481a5b9cdd59999a58da595b9d60521b604082015260600190565b634e487b7160e01b600052601160045260246000fd5b6000828210156108735761087361084b565b500390565b6000821982111561088b5761088b61084b565b500190565b6020808252601a90820152791bdd995c999b1bddc818985b185b98d9481c9958da5c1a595b9d60321b60408201526060019056feddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3efa2646970667358221220fb41911906c13621f5b935b5e1077208b32f61a96745410121b8a1053750a46164736f6c634300080b0033";

export class TestAlchemicToken__factory extends ContractFactory {
  constructor(
    ...args: [signer: Signer] | ConstructorParameters<typeof ContractFactory>
  ) {
    if (args.length === 1) {
      super(_abi, _bytecode, args[0]);
    } else {
      super(...args);
    }
  }

  deploy(
    amountToMint: BigNumberish,
    _decimals: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<TestAlchemicToken> {
    return super.deploy(
      amountToMint,
      _decimals,
      overrides || {}
    ) as Promise<TestAlchemicToken>;
  }
  getDeployTransaction(
    amountToMint: BigNumberish,
    _decimals: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(amountToMint, _decimals, overrides || {});
  }
  attach(address: string): TestAlchemicToken {
    return super.attach(address) as TestAlchemicToken;
  }
  connect(signer: Signer): TestAlchemicToken__factory {
    return super.connect(signer) as TestAlchemicToken__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): TestAlchemicTokenInterface {
    return new utils.Interface(_abi) as TestAlchemicTokenInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): TestAlchemicToken {
    return new Contract(address, _abi, signerOrProvider) as TestAlchemicToken;
  }
}
