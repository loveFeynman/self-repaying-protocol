/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  Signer,
  utils,
  BigNumberish,
  Contract,
  ContractFactory,
  Overrides,
} from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type { TestERC20, TestERC20Interface } from "../TestERC20";

const _abi = [
  {
    inputs: [
      {
        internalType: "uint256",
        name: "amountToMint",
        type: "uint256",
      },
      {
        internalType: "uint8",
        name: "_decimals",
        type: "uint8",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "owner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "spender",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "Approval",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "owner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "recipient",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "Transfer",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "allowance",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "spender",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "approve",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "balanceOf",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "burn",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "owner",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "burnFrom",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "decimals",
    outputs: [
      {
        internalType: "uint8",
        name: "",
        type: "uint8",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "mint",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "totalSupply",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "recipient",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "transfer",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "sender",
        type: "address",
      },
      {
        internalType: "address",
        name: "recipient",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "transferFrom",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b50604051610a7c380380610a7c83398101604081905261002f916100fb565b6001805460ff191660ff83161790556100483383610050565b505050610157565b6001600160a01b0382166000908152600260205260408120548190610076908490610131565b9050828110156100bf5760405162461bcd60e51b815260206004820152601060248201526f6f766572666c6f772062616c616e636560801b604482015260640160405180910390fd5b6001600160a01b0384166000908152600260205260408120829055805484919081906100ec908490610131565b90915550600195945050505050565b6000806040838503121561010e57600080fd5b82519150602083015160ff8116811461012657600080fd5b809150509250929050565b6000821982111561015257634e487b7160e01b600052601160045260246000fd5b500190565b610916806101666000396000f3fe608060405234801561001057600080fd5b506004361061009e5760003560e01c806342966c681161006657806342966c681461012757806370a082311461013a57806379cc67901461015a578063a9059cbb1461016d578063dd62ed3e1461018057600080fd5b8063095ea7b3146100a357806318160ddd146100cb57806323b872dd146100e2578063313ce567146100f557806340c10f1914610114575b600080fd5b6100b66100b1366004610770565b6101ab565b60405190151581526020015b60405180910390f35b6100d460005481565b6040519081526020016100c2565b6100b66100f036600461079a565b610217565b6001546101029060ff1681565b60405160ff90911681526020016100c2565b6100b6610122366004610770565b6103ca565b6100b66101353660046107d6565b610471565b6100d46101483660046107ef565b60026020526000908152604090205481565b6100b6610168366004610770565b6104f8565b6100b661017b366004610770565b61062f565b6100d461018e366004610811565b600360209081526000928352604080842090915290825290205481565b3360008181526003602090815260408083206001600160a01b038716808552925280832085905551919290917f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925906102069086815260200190565b60405180910390a350600192915050565b6001600160a01b0383166000908152600360209081526040808320338452909152812054828110156102895760405162461bcd60e51b8152602060048201526016602482015275185b1b1bddd85b98d9481a5b9cdd59999a58da595b9d60521b60448201526064015b60405180910390fd5b610293838261085a565b6001600160a01b038087166000908152600360209081526040808320338452825280832094909455918716815260029091522054806102d28582610871565b10156102f05760405162461bcd60e51b815260040161028090610889565b6102fa8482610871565b6001600160a01b0380871660009081526002602052604080822093909355908816815220548481101561036f5760405162461bcd60e51b815260206004820152601860248201527f756e646572666c6f772062616c616e63652073656e64657200000000000000006044820152606401610280565b610379858261085a565b6001600160a01b0388811660008181526002602090815260409182902094909455518881529189169290916000805160206108c1833981519152910160405180910390a35060019695505050505050565b6001600160a01b03821660009081526002602052604081205481906103f0908490610871565b9050828110156104355760405162461bcd60e51b815260206004820152601060248201526f6f766572666c6f772062616c616e636560801b6044820152606401610280565b6001600160a01b038416600090815260026020526040812082905580548491908190610462908490610871565b90915550600195945050505050565b33600090815260026020526040812054828110156104a15760405162461bcd60e51b815260040161028090610889565b6104ab838261085a565b33600090815260026020526040812091909155805484919081906104d090849061085a565b909155505060405183815260009033906000805160206108c183398151915290602001610206565b6001600160a01b0382166000908152600360209081526040808320338452909152812054828110156105655760405162461bcd60e51b8152602060048201526016602482015275185b1b1bddd85b98d9481a5b9cdd59999a58da595b9d60521b6044820152606401610280565b61056f838261085a565b6001600160a01b038516600081815260036020908152604080832033845282528083209490945591815260029091522054838110156105c05760405162461bcd60e51b815260040161028090610889565b6105ca848261085a565b6001600160a01b038616600090815260026020526040812091909155805485919081906105f890849061085a565b909155505060405184815260009033906000805160206108c1833981519152906020015b60405180910390a3506001949350505050565b33600090815260026020526040812054828110156106865760405162461bcd60e51b8152602060048201526014602482015273696e73756666696369656e742062616c616e636560601b6044820152606401610280565b610690838261085a565b33600090815260026020526040808220929092556001600160a01b03861681522054806106bd8582610871565b101561070b5760405162461bcd60e51b815260206004820152601a60248201527f726563697069656e742062616c616e6365206f766572666c6f770000000000006044820152606401610280565b6107158482610871565b6001600160a01b0386166000818152600260205260409081902092909255905133906000805160206108c18339815191529061061c9088815260200190565b80356001600160a01b038116811461076b57600080fd5b919050565b6000806040838503121561078357600080fd5b61078c83610754565b946020939093013593505050565b6000806000606084860312156107af57600080fd5b6107b884610754565b92506107c660208501610754565b9150604084013590509250925092565b6000602082840312156107e857600080fd5b5035919050565b60006020828403121561080157600080fd5b61080a82610754565b9392505050565b6000806040838503121561082457600080fd5b61082d83610754565b915061083b60208401610754565b90509250929050565b634e487b7160e01b600052601160045260246000fd5b60008282101561086c5761086c610844565b500390565b6000821982111561088457610884610844565b500190565b6020808252601a908201527f6f766572666c6f772062616c616e636520726563697069656e7400000000000060408201526060019056feddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3efa2646970667358221220c1e9d9de7686b41e5c15aef54c20857c511ce7f7248c8b08f174b6031142be5564736f6c634300080b0033";

export class TestERC20__factory extends ContractFactory {
  constructor(
    ...args: [signer: Signer] | ConstructorParameters<typeof ContractFactory>
  ) {
    if (args.length === 1) {
      super(_abi, _bytecode, args[0]);
    } else {
      super(...args);
    }
  }

  deploy(
    amountToMint: BigNumberish,
    _decimals: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<TestERC20> {
    return super.deploy(
      amountToMint,
      _decimals,
      overrides || {}
    ) as Promise<TestERC20>;
  }
  getDeployTransaction(
    amountToMint: BigNumberish,
    _decimals: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(amountToMint, _decimals, overrides || {});
  }
  attach(address: string): TestERC20 {
    return super.attach(address) as TestERC20;
  }
  connect(signer: Signer): TestERC20__factory {
    return super.connect(signer) as TestERC20__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): TestERC20Interface {
    return new utils.Interface(_abi) as TestERC20Interface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): TestERC20 {
    return new Contract(address, _abi, signerOrProvider) as TestERC20;
  }
}
