/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  TestErc20Receiver,
  TestErc20ReceiverInterface,
} from "../TestErc20Receiver";

const _abi = [
  {
    inputs: [],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "underlyingToken",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "onERC20Received",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x6080604052348015600f57600080fd5b5060aa8061001e6000396000f3fe6080604052348015600f57600080fd5b506004361060285760003560e01c8063bc04f0af14602d575b600080fd5b603c6038366004603e565b5050565b005b60008060408385031215605057600080fd5b82356001600160a01b0381168114606657600080fd5b94602093909301359350505056fea2646970667358221220b29cd3e185532612305d6988105362c25a81d5910e44f2f65ee405e61b789bc864736f6c634300080b0033";

export class TestErc20Receiver__factory extends ContractFactory {
  constructor(
    ...args: [signer: Signer] | ConstructorParameters<typeof ContractFactory>
  ) {
    if (args.length === 1) {
      super(_abi, _bytecode, args[0]);
    } else {
      super(...args);
    }
  }

  deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<TestErc20Receiver> {
    return super.deploy(overrides || {}) as Promise<TestErc20Receiver>;
  }
  getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): TestErc20Receiver {
    return super.attach(address) as TestErc20Receiver;
  }
  connect(signer: Signer): TestErc20Receiver__factory {
    return super.connect(signer) as TestErc20Receiver__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): TestErc20ReceiverInterface {
    return new utils.Interface(_abi) as TestErc20ReceiverInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): TestErc20Receiver {
    return new Contract(address, _abi, signerOrProvider) as TestErc20Receiver;
  }
}
