/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type { SlimAddress, SlimAddressInterface } from "../SlimAddress";

const _abi = [
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "c__0xae6b74c5",
        type: "bytes32",
      },
    ],
    name: "c_0xae6b74c5",
    outputs: [],
    stateMutability: "pure",
    type: "function",
  },
];

const _bytecode =
  "0x60e7610052600b82828239805160001a607314610045577f4e487b7100000000000000000000000000000000000000000000000000000000600052600060045260246000fd5b30600052607381538281f3fe730000000000000000000000000000000000000000301460806040526004361060335760003560e01c8063ff1cc3d3146038575b600080fd5b604e6004803603810190604a91906089565b6050565b005b50565b600080fd5b6000819050919050565b6069816058565b8114607357600080fd5b50565b6000813590506083816062565b92915050565b600060208284031215609c57609b6053565b5b600060a8848285016076565b9150509291505056fea26469706673582212204c698aea49fba2a545531cc8ecb61c0860392bf7d4779a0a64a6818cf029e65964736f6c63430008090033";

export class SlimAddress__factory extends ContractFactory {
  constructor(
    ...args: [signer: Signer] | ConstructorParameters<typeof ContractFactory>
  ) {
    if (args.length === 1) {
      super(_abi, _bytecode, args[0]);
    } else {
      super(...args);
    }
  }

  deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<SlimAddress> {
    return super.deploy(overrides || {}) as Promise<SlimAddress>;
  }
  getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): SlimAddress {
    return super.attach(address) as SlimAddress;
  }
  connect(signer: Signer): SlimAddress__factory {
    return super.connect(signer) as SlimAddress__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): SlimAddressInterface {
    return new utils.Interface(_abi) as SlimAddressInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): SlimAddress {
    return new Contract(address, _abi, signerOrProvider) as SlimAddress;
  }
}
