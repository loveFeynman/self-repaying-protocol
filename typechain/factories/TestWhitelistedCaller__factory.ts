/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  TestWhitelistedCaller,
  TestWhitelistedCallerInterface,
} from "../TestWhitelistedCaller";

const _abi = [
  {
    inputs: [],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "target",
        type: "address",
      },
    ],
    name: "test",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b5060f68061001f6000396000f3fe6080604052348015600f57600080fd5b506004361060285760003560e01c8063bb29998e14602d575b600080fd5b603c60383660046092565b603e565b005b806001600160a01b031663f8a8fd6d6040518163ffffffff1660e01b8152600401600060405180830381600087803b158015607857600080fd5b505af1158015608b573d6000803e3d6000fd5b5050505050565b60006020828403121560a357600080fd5b81356001600160a01b038116811460b957600080fd5b939250505056fea2646970667358221220c75daecfec26a16c8d959fdf28eda78c755195d2a5ef4a493eaaba5661185afc64736f6c634300080b0033";

export class TestWhitelistedCaller__factory extends ContractFactory {
  constructor(
    ...args: [signer: Signer] | ConstructorParameters<typeof ContractFactory>
  ) {
    if (args.length === 1) {
      super(_abi, _bytecode, args[0]);
    } else {
      super(...args);
    }
  }

  deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<TestWhitelistedCaller> {
    return super.deploy(overrides || {}) as Promise<TestWhitelistedCaller>;
  }
  getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): TestWhitelistedCaller {
    return super.attach(address) as TestWhitelistedCaller;
  }
  connect(signer: Signer): TestWhitelistedCaller__factory {
    return super.connect(signer) as TestWhitelistedCaller__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): TestWhitelistedCallerInterface {
    return new utils.Interface(_abi) as TestWhitelistedCallerInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): TestWhitelistedCaller {
    return new Contract(
      address,
      _abi,
      signerOrProvider
    ) as TestWhitelistedCaller;
  }
}
