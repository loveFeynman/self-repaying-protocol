/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type { Whitelist, WhitelistInterface } from "../Whitelist";

const _abi = [
  {
    inputs: [],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [],
    name: "IllegalState",
    type: "error",
  },
  {
    inputs: [],
    name: "Unauthorized",
    type: "error",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "account",
        type: "address",
      },
    ],
    name: "AccountAdded",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "account",
        type: "address",
      },
    ],
    name: "AccountRemoved",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "previousOwner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "OwnershipTransferred",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [],
    name: "WhitelistDisabled",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "caller",
        type: "address",
      },
    ],
    name: "add",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "disable",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "disabled",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getAddresses",
    outputs: [
      {
        internalType: "address[]",
        name: "",
        type: "address[]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "account",
        type: "address",
      },
    ],
    name: "isWhitelisted",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "owner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "caller",
        type: "address",
      },
    ],
    name: "remove",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "renounceOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "transferOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b5061001a3361001f565b61006f565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6107958061007e6000396000f3fe608060405234801561001057600080fd5b50600436106100835760003560e01c80630a3b0a4f1461008857806329092d0e1461009d5780632f2770db146100b05780633af32abf146100b8578063715018a6146100e05780638da5cb5b146100e8578063a39fac12146100fd578063ee07080514610112578063f2fde38b1461011f575b600080fd5b61009b610096366004610611565b610132565b005b61009b6100ab366004610611565b6101a4565b61009b61020b565b6100cb6100c6366004610611565b61024b565b60405190151581526020015b60405180910390f35b61009b61026b565b6100f06102af565b6040516100d79190610641565b6101056102be565b6040516100d79190610655565b6003546100cb9060ff1681565b61009b61012d366004610611565b610323565b61013a6103c3565b60035460ff161561015e57604051634a613c4160e01b815260040160405180910390fd5b6101696001826103fb565b507f8f42195a0bbfa58954be4349deb9efc38bdb9c298e529f705f8bc1e38bce0399816040516101999190610641565b60405180910390a150565b6101ac6103c3565b60035460ff16156101d057604051634a613c4160e01b815260040160405180910390fd5b6101db60018261045c565b507fbf2e373b8263f701e10efcac80ea442afcb29c6852b3a42b0b46cc8edaaf54a7816040516101999190610641565b6102136103c3565b6003805460ff191660011790556040517f212c6e1d3045c9581ef0adf2504dbb1d137f52f38162ccf77a16c69d14eba5c390600090a1565b60035460009060ff168061026557506102656001836105a0565b92915050565b336102746102af565b6001600160a01b0316146102a35760405162461bcd60e51b815260040161029a906106a2565b60405180910390fd5b6102ad60006105c1565b565b6000546001600160a01b031690565b6060600160000180548060200260200160405190810160405280929190818152602001828054801561031957602002820191906000526020600020905b81546001600160a01b031681526001909101906020018083116102fb575b5050505050905090565b3361032c6102af565b6001600160a01b0316146103525760405162461bcd60e51b815260040161029a906106a2565b6001600160a01b0381166103b75760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b606482015260840161029a565b6103c0816105c1565b50565b6103cb6102af565b6001600160a01b0316336001600160a01b0316146102ad576040516282b42960e81b815260040160405180910390fd5b600061040783836105a0565b1561041457506000610265565b508154600180820184556000848152602080822090930180546001600160a01b0319166001600160a01b03959095169485179055845493815293810190915260409092205590565b6001600160a01b038116600090815260018301602052604081205480610486576000915050610265565b80610490816106ed565b8554909250600091506104a590600190610704565b90508082146105455760008560000182815481106104c5576104c561071b565b60009182526020909120015486546001600160a01b03909116915081908790859081106104f4576104f461071b565b600091825260209091200180546001600160a01b0319166001600160a01b0392909216919091179055610528836001610731565b6001600160a01b0390911660009081526001870160205260409020555b845485908061055657610556610749565b60008281526020808220600019908401810180546001600160a01b03191690559092019092556001600160a01b039590951681526001958601909452505060408220919091555090565b6001600160a01b031660009081526001919091016020526040902054151590565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b60006020828403121561062357600080fd5b81356001600160a01b038116811461063a57600080fd5b9392505050565b6001600160a01b0391909116815260200190565b6020808252825182820181905260009190848201906040850190845b818110156106965783516001600160a01b031683529284019291840191600101610671565b50909695505050505050565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b634e487b7160e01b600052601160045260246000fd5b6000816106fc576106fc6106d7565b506000190190565b600082821015610716576107166106d7565b500390565b634e487b7160e01b600052603260045260246000fd5b60008219821115610744576107446106d7565b500190565b634e487b7160e01b600052603160045260246000fdfea264697066735822122068869132afec2e97eac06e5a546aabf3310132807024a9aa7be3164c286cab4864736f6c634300080b0033";

export class Whitelist__factory extends ContractFactory {
  constructor(
    ...args: [signer: Signer] | ConstructorParameters<typeof ContractFactory>
  ) {
    if (args.length === 1) {
      super(_abi, _bytecode, args[0]);
    } else {
      super(...args);
    }
  }

  deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<Whitelist> {
    return super.deploy(overrides || {}) as Promise<Whitelist>;
  }
  getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): Whitelist {
    return super.attach(address) as Whitelist;
  }
  connect(signer: Signer): Whitelist__factory {
    return super.connect(signer) as Whitelist__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): WhitelistInterface {
    return new utils.Interface(_abi) as WhitelistInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): Whitelist {
    return new Contract(address, _abi, signerOrProvider) as Whitelist;
  }
}
