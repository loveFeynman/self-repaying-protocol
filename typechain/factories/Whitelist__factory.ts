/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type { Whitelist, WhitelistInterface } from "../Whitelist";

const _abi = [
  {
    inputs: [],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [],
    name: "IllegalState",
    type: "error",
  },
  {
    inputs: [],
    name: "Unauthorized",
    type: "error",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "account",
        type: "address",
      },
    ],
    name: "AccountAdded",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "account",
        type: "address",
      },
    ],
    name: "AccountRemoved",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "previousOwner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "OwnershipTransferred",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [],
    name: "WhitelistDisabled",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "caller",
        type: "address",
      },
    ],
    name: "add",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "disable",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "disabled",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getAddresses",
    outputs: [
      {
        internalType: "address[]",
        name: "",
        type: "address[]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "account",
        type: "address",
      },
    ],
    name: "isWhitelisted",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "owner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "caller",
        type: "address",
      },
    ],
    name: "remove",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "renounceOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "transferOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b5061001a3361001f565b61006f565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6107a68061007e6000396000f3fe608060405234801561001057600080fd5b50600436106100935760003560e01c8063715018a611610066578063715018a6146100f05780638da5cb5b146100f8578063a39fac1214610113578063ee07080514610128578063f2fde38b1461013557600080fd5b80630a3b0a4f1461009857806329092d0e146100ad5780632f2770db146100c05780633af32abf146100c8575b600080fd5b6100ab6100a636600461066b565b610148565b005b6100ab6100bb36600461066b565b6101c0565b6100ab610231565b6100db6100d636600461066b565b610271565b60405190151581526020015b60405180910390f35b6100ab6102a2565b6000546040516001600160a01b0390911681526020016100e7565b61011b61030d565b6040516100e7919061069b565b6003546100db9060ff1681565b6100ab61014336600461066b565b610372565b61015061043d565b60035460ff161561017457604051634a613c4160e01b815260040160405180910390fd5b61017f600182610467565b506040516001600160a01b03821681527f8f42195a0bbfa58954be4349deb9efc38bdb9c298e529f705f8bc1e38bce0399906020015b60405180910390a150565b6101c861043d565b60035460ff16156101ec57604051634a613c4160e01b815260040160405180910390fd5b6101f76001826104d7565b506040516001600160a01b03821681527fbf2e373b8263f701e10efcac80ea442afcb29c6852b3a42b0b46cc8edaaf54a7906020016101b5565b61023961043d565b6003805460ff191660011790556040517f212c6e1d3045c9581ef0adf2504dbb1d137f52f38162ccf77a16c69d14eba5c390600090a1565b60035460009060ff168061029c57506001600160a01b03821660009081526002602052604090205415155b92915050565b6000546001600160a01b031633146103015760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064015b60405180910390fd5b61030b600061061b565b565b6060600160000180548060200260200160405190810160405280929190818152602001828054801561036857602002820191906000526020600020905b81546001600160a01b0316815260019091019060200180831161034a575b5050505050905090565b6000546001600160a01b031633146103cc5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016102f8565b6001600160a01b0381166104315760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084016102f8565b61043a8161061b565b50565b6000546001600160a01b0316331461030b576040516282b42960e81b815260040160405180910390fd5b6001600160a01b03811660009081526001830160205260408120541561048f5750600061029c565b508154600180820184556000848152602080822090930180546001600160a01b0319166001600160a01b03959095169485179055845493815293810190915260409092205590565b6001600160a01b03811660009081526001830160205260408120548061050157600091505061029c565b8061050b816106fe565b85549092506000915061052090600190610715565b90508082146105c05760008560000182815481106105405761054061072c565b60009182526020909120015486546001600160a01b039091169150819087908590811061056f5761056f61072c565b600091825260209091200180546001600160a01b0319166001600160a01b03929092169190911790556105a3836001610742565b6001600160a01b0390911660009081526001870160205260409020555b84548590806105d1576105d161075a565b60008281526020808220600019908401810180546001600160a01b03191690559092019092556001600160a01b039590951681526001958601909452505060408220919091555090565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b60006020828403121561067d57600080fd5b81356001600160a01b038116811461069457600080fd5b9392505050565b6020808252825182820181905260009190848201906040850190845b818110156106dc5783516001600160a01b0316835292840192918401916001016106b7565b50909695505050505050565b634e487b7160e01b600052601160045260246000fd5b60008161070d5761070d6106e8565b506000190190565b600082821015610727576107276106e8565b500390565b634e487b7160e01b600052603260045260246000fd5b60008219821115610755576107556106e8565b500190565b634e487b7160e01b600052603160045260246000fdfea26469706673582212209c7d4a9dcae7a3fe3bcd743decc1a157c7f604b9621ef371e0dae5f74640dd6964736f6c634300080b0033";

export class Whitelist__factory extends ContractFactory {
  constructor(
    ...args: [signer: Signer] | ConstructorParameters<typeof ContractFactory>
  ) {
    if (args.length === 1) {
      super(_abi, _bytecode, args[0]);
    } else {
      super(...args);
    }
  }

  deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<Whitelist> {
    return super.deploy(overrides || {}) as Promise<Whitelist>;
  }
  getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): Whitelist {
    return super.attach(address) as Whitelist;
  }
  connect(signer: Signer): Whitelist__factory {
    return super.connect(signer) as Whitelist__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): WhitelistInterface {
    return new utils.Interface(_abi) as WhitelistInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): Whitelist {
    return new Contract(address, _abi, signerOrProvider) as Whitelist;
  }
}
