/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  TransmuterMock,
  TransmuterMockInterface,
} from "../TransmuterMock";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "_alToken",
        type: "address",
      },
      {
        internalType: "address",
        name: "_underlyingToken",
        type: "address",
      },
      {
        internalType: "address",
        name: "_collateralSource",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "origin",
        type: "address",
      },
      {
        indexed: false,
        internalType: "address",
        name: "underlying",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "Distribution",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "whitelisted",
        type: "address",
      },
      {
        indexed: false,
        internalType: "bool",
        name: "state",
        type: "bool",
      },
    ],
    name: "WhitelistSet",
    type: "event",
  },
  {
    inputs: [],
    name: "TRANSMUTATION_PERIOD",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "ZERO_ADDRESS",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "alToken",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
      {
        internalType: "address",
        name: "recipient",
        type: "address",
      },
    ],
    name: "claim",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "collateralSource",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "exchange",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "governance",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_toWhitelist",
        type: "address",
      },
      {
        internalType: "bool",
        name: "_state",
        type: "bool",
      },
    ],
    name: "setWhitelist",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "totalExchanged",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "underlyingToken",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "whiteList",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b506040516104f53803806104f583398101604081905261002f916100a2565b6001600081905560078054336001600160a01b0319918216179091556002805482166001600160a01b03968716179055600380548216948616949094179093556005805490931691909316179055603290556100e5565b80516001600160a01b038116811461009d57600080fd5b919050565b6000806000606084860312156100b757600080fd5b6100c084610086565b92506100ce60208501610086565b91506100dc60408501610086565b90509250925092565b610401806100f46000396000f3fe608060405234801561001057600080fd5b50600436106100995760003560e01c806301f50c861461009e5780632495a599146100ba578063372c12b1146100e55780635355655914610118578063538ba4f91461012d57806353d6fd591461013557806356273313146101485780635aa6e675146101515780636790fab314610164578063b6797d3c14610177578063ddd5e1b21461018a575b600080fd5b6100a760015481565b6040519081526020015b60405180910390f35b6003546100cd906001600160a01b031681565b6040516001600160a01b0390911681526020016100b1565b6101086100f3366004610302565b60066020526000908152604090205460ff1681565b60405190151581526020016100b1565b61012b610126366004610324565b61019d565b005b6100cd600081565b61012b61014336600461033d565b6101b7565b6100a760045481565b6007546100cd906001600160a01b031681565b6002546100cd906001600160a01b031681565b6005546100cd906001600160a01b031681565b61012b610198366004610379565b610272565b80600460008282546101af91906103a5565b909155505050565b6007546001600160a01b0316331461020f5760405162461bcd60e51b81526020600482015260176024820152765472616e736d757465723a2021676f7665726e616e636560481b604482015260640160405180910390fd5b6001600160a01b038216600081815260066020908152604091829020805460ff19168515159081179091558251938452908301527f0aa5ec5ffdc7f6f9c4d0dded489d7450297155cb2f71cb771e02427f7dff4f51910160405180910390a15050565b600554600354604051631a4ca37b60e21b81526001600160a01b0391821660048201526024810185905283821660448201529116906369328dec90606401600060405180830381600087803b1580156102ca57600080fd5b505af11580156102de573d6000803e3d6000fd5b505050505050565b80356001600160a01b03811681146102fd57600080fd5b919050565b60006020828403121561031457600080fd5b61031d826102e6565b9392505050565b60006020828403121561033657600080fd5b5035919050565b6000806040838503121561035057600080fd5b610359836102e6565b91506020830135801515811461036e57600080fd5b809150509250929050565b6000806040838503121561038c57600080fd5b8235915061039c602084016102e6565b90509250929050565b600082198211156103c657634e487b7160e01b600052601160045260246000fd5b50019056fea264697066735822122048fc7deffa3f9c8f8ffe3060a7c8e5557f7e20d3cef0effe5761e3ca79f5704a64736f6c634300080b0033";

export class TransmuterMock__factory extends ContractFactory {
  constructor(
    ...args: [signer: Signer] | ConstructorParameters<typeof ContractFactory>
  ) {
    if (args.length === 1) {
      super(_abi, _bytecode, args[0]);
    } else {
      super(...args);
    }
  }

  deploy(
    _alToken: string,
    _underlyingToken: string,
    _collateralSource: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<TransmuterMock> {
    return super.deploy(
      _alToken,
      _underlyingToken,
      _collateralSource,
      overrides || {}
    ) as Promise<TransmuterMock>;
  }
  getDeployTransaction(
    _alToken: string,
    _underlyingToken: string,
    _collateralSource: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(
      _alToken,
      _underlyingToken,
      _collateralSource,
      overrides || {}
    );
  }
  attach(address: string): TransmuterMock {
    return super.attach(address) as TransmuterMock;
  }
  connect(signer: Signer): TransmuterMock__factory {
    return super.connect(signer) as TransmuterMock__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): TransmuterMockInterface {
    return new utils.Interface(_abi) as TransmuterMockInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): TransmuterMock {
    return new Contract(address, _abi, signerOrProvider) as TransmuterMock;
  }
}
