/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  TestTransmuter,
  TestTransmuterInterface,
} from "../TestTransmuter";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "token",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "onERC20Received",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "totalExchanged",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b50610177806100206000396000f3fe608060405234801561001057600080fd5b50600436106100365760003560e01c80636881a3651461003b578063bc04f0af1461006d575b600080fd5b61005b6100493660046100cf565b60006020819052908152604090205481565b60405190815260200160405180910390f35b61008061007b3660046100f1565b610082565b005b6001600160a01b038216600090815260208190526040812080548392906100aa90849061011b565b90915550505050565b80356001600160a01b03811681146100ca57600080fd5b919050565b6000602082840312156100e157600080fd5b6100ea826100b3565b9392505050565b6000806040838503121561010457600080fd5b61010d836100b3565b946020939093013593505050565b6000821982111561013c57634e487b7160e01b600052601160045260246000fd5b50019056fea26469706673582212202dc470a3a3151ede6c78230c7e10f849920a62c916e864342342d907c8a0fb4d64736f6c634300080b0033";

export class TestTransmuter__factory extends ContractFactory {
  constructor(
    ...args: [signer: Signer] | ConstructorParameters<typeof ContractFactory>
  ) {
    if (args.length === 1) {
      super(_abi, _bytecode, args[0]);
    } else {
      super(...args);
    }
  }

  deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<TestTransmuter> {
    return super.deploy(overrides || {}) as Promise<TestTransmuter>;
  }
  getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): TestTransmuter {
    return super.attach(address) as TestTransmuter;
  }
  connect(signer: Signer): TestTransmuter__factory {
    return super.connect(signer) as TestTransmuter__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): TestTransmuterInterface {
    return new utils.Interface(_abi) as TestTransmuterInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): TestTransmuter {
    return new Contract(address, _abi, signerOrProvider) as TestTransmuter;
  }
}
