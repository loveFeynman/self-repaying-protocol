/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Contract, Signer, utils } from "ethers";
import { Provider } from "@ethersproject/providers";
import type {
  IAlchemistV2Errors,
  IAlchemistV2ErrorsInterface,
} from "../IAlchemistV2Errors";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "yieldToken",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "expectedValue",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "maximumExpectedValue",
        type: "uint256",
      },
    ],
    name: "ExpectedValueExceeded",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "underlyingToken",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "available",
        type: "uint256",
      },
    ],
    name: "LiquidationLimitExceeded",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "yieldToken",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "loss",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "maximumLoss",
        type: "uint256",
      },
    ],
    name: "LossExceeded",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "available",
        type: "uint256",
      },
    ],
    name: "MintingLimitExceeded",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "underlyingToken",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "available",
        type: "uint256",
      },
    ],
    name: "RepayLimitExceeded",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "minimumAmountOut",
        type: "uint256",
      },
    ],
    name: "SlippageExceeded",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "token",
        type: "address",
      },
    ],
    name: "TokenDisabled",
    type: "error",
  },
  {
    inputs: [],
    name: "Undercollateralized",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "token",
        type: "address",
      },
    ],
    name: "UnsupportedToken",
    type: "error",
  },
];

export class IAlchemistV2Errors__factory {
  static readonly abi = _abi;
  static createInterface(): IAlchemistV2ErrorsInterface {
    return new utils.Interface(_abi) as IAlchemistV2ErrorsInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): IAlchemistV2Errors {
    return new Contract(address, _abi, signerOrProvider) as IAlchemistV2Errors;
  }
}
