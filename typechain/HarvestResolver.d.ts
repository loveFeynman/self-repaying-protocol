/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface HarvestResolverInterface extends ethers.utils.Interface {
  functions: {
    "addHarvestJob(bool,address,address,uint256,uint256)": FunctionFragment;
    "checker()": FunctionFragment;
    "harvestJobs(address)": FunctionFragment;
    "owner()": FunctionFragment;
    "paused()": FunctionFragment;
    "recoverFunds(address)": FunctionFragment;
    "removeHarvestJob(address)": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "setActive(address,bool)": FunctionFragment;
    "setAlchemist(address,address)": FunctionFragment;
    "setMinimumDelay(address,uint256)": FunctionFragment;
    "setMinimumHarvestAmount(address,uint256)": FunctionFragment;
    "setPause(bool)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "yieldTokens(uint256)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "addHarvestJob",
    values: [boolean, string, string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "checker", values?: undefined): string;
  encodeFunctionData(functionFragment: "harvestJobs", values: [string]): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(functionFragment: "paused", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "recoverFunds",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "removeHarvestJob",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setActive",
    values: [string, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setAlchemist",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "setMinimumDelay",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setMinimumHarvestAmount",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "setPause", values: [boolean]): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "yieldTokens",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "addHarvestJob",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "checker", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "harvestJobs",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "paused", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "recoverFunds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeHarvestJob",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setActive", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setAlchemist",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMinimumDelay",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMinimumHarvestAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setPause", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "yieldTokens",
    data: BytesLike
  ): Result;

  events: {
    "OwnershipTransferred(address,address)": EventFragment;
    "RemoveHarvestJob(address)": EventFragment;
    "SetHarvestJob(bool,address,address,uint256,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RemoveHarvestJob"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetHarvestJob"): EventFragment;
}

export type OwnershipTransferredEvent = TypedEvent<
  [string, string] & { previousOwner: string; newOwner: string }
>;

export type RemoveHarvestJobEvent = TypedEvent<
  [string] & { yieldToken: string }
>;

export type SetHarvestJobEvent = TypedEvent<
  [boolean, string, string, BigNumber, BigNumber] & {
    active: boolean;
    yieldToken: string;
    alchemist: string;
    minimumHarvestAmount: BigNumber;
    minimumDelay: BigNumber;
  }
>;

export class HarvestResolver extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: HarvestResolverInterface;

  functions: {
    addHarvestJob(
      active: boolean,
      yieldToken: string,
      alchemist: string,
      minimumHarvestAmount: BigNumberish,
      minimumDelay: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    checker(
      overrides?: CallOverrides
    ): Promise<[boolean, string] & { canExec: boolean; execPayload: string }>;

    harvestJobs(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [boolean, string, BigNumber, BigNumber, BigNumber] & {
        active: boolean;
        alchemist: string;
        lastHarvest: BigNumber;
        minimumHarvestAmount: BigNumber;
        minimumDelay: BigNumber;
      }
    >;

    owner(overrides?: CallOverrides): Promise<[string]>;

    paused(overrides?: CallOverrides): Promise<[boolean]>;

    recoverFunds(
      token: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    removeHarvestJob(
      yieldToken: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setActive(
      yieldToken: string,
      active: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setAlchemist(
      yieldToken: string,
      alchemist: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setMinimumDelay(
      yieldToken: string,
      minimumDelay: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setMinimumHarvestAmount(
      yieldToken: string,
      minimumHarvestAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setPause(
      pauseState: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    yieldTokens(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;
  };

  addHarvestJob(
    active: boolean,
    yieldToken: string,
    alchemist: string,
    minimumHarvestAmount: BigNumberish,
    minimumDelay: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  checker(
    overrides?: CallOverrides
  ): Promise<[boolean, string] & { canExec: boolean; execPayload: string }>;

  harvestJobs(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<
    [boolean, string, BigNumber, BigNumber, BigNumber] & {
      active: boolean;
      alchemist: string;
      lastHarvest: BigNumber;
      minimumHarvestAmount: BigNumber;
      minimumDelay: BigNumber;
    }
  >;

  owner(overrides?: CallOverrides): Promise<string>;

  paused(overrides?: CallOverrides): Promise<boolean>;

  recoverFunds(
    token: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  removeHarvestJob(
    yieldToken: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  renounceOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setActive(
    yieldToken: string,
    active: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setAlchemist(
    yieldToken: string,
    alchemist: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setMinimumDelay(
    yieldToken: string,
    minimumDelay: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setMinimumHarvestAmount(
    yieldToken: string,
    minimumHarvestAmount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setPause(
    pauseState: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  yieldTokens(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

  callStatic: {
    addHarvestJob(
      active: boolean,
      yieldToken: string,
      alchemist: string,
      minimumHarvestAmount: BigNumberish,
      minimumDelay: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    checker(
      overrides?: CallOverrides
    ): Promise<[boolean, string] & { canExec: boolean; execPayload: string }>;

    harvestJobs(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [boolean, string, BigNumber, BigNumber, BigNumber] & {
        active: boolean;
        alchemist: string;
        lastHarvest: BigNumber;
        minimumHarvestAmount: BigNumber;
        minimumDelay: BigNumber;
      }
    >;

    owner(overrides?: CallOverrides): Promise<string>;

    paused(overrides?: CallOverrides): Promise<boolean>;

    recoverFunds(token: string, overrides?: CallOverrides): Promise<void>;

    removeHarvestJob(
      yieldToken: string,
      overrides?: CallOverrides
    ): Promise<void>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    setActive(
      yieldToken: string,
      active: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    setAlchemist(
      yieldToken: string,
      alchemist: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setMinimumDelay(
      yieldToken: string,
      minimumDelay: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setMinimumHarvestAmount(
      yieldToken: string,
      minimumHarvestAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setPause(pauseState: boolean, overrides?: CallOverrides): Promise<void>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    yieldTokens(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;
  };

  filters: {
    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): TypedEventFilter<
      [string, string],
      { previousOwner: string; newOwner: string }
    >;

    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): TypedEventFilter<
      [string, string],
      { previousOwner: string; newOwner: string }
    >;

    "RemoveHarvestJob(address)"(
      yieldToken?: null
    ): TypedEventFilter<[string], { yieldToken: string }>;

    RemoveHarvestJob(
      yieldToken?: null
    ): TypedEventFilter<[string], { yieldToken: string }>;

    "SetHarvestJob(bool,address,address,uint256,uint256)"(
      active?: null,
      yieldToken?: null,
      alchemist?: null,
      minimumHarvestAmount?: null,
      minimumDelay?: null
    ): TypedEventFilter<
      [boolean, string, string, BigNumber, BigNumber],
      {
        active: boolean;
        yieldToken: string;
        alchemist: string;
        minimumHarvestAmount: BigNumber;
        minimumDelay: BigNumber;
      }
    >;

    SetHarvestJob(
      active?: null,
      yieldToken?: null,
      alchemist?: null,
      minimumHarvestAmount?: null,
      minimumDelay?: null
    ): TypedEventFilter<
      [boolean, string, string, BigNumber, BigNumber],
      {
        active: boolean;
        yieldToken: string;
        alchemist: string;
        minimumHarvestAmount: BigNumber;
        minimumDelay: BigNumber;
      }
    >;
  };

  estimateGas: {
    addHarvestJob(
      active: boolean,
      yieldToken: string,
      alchemist: string,
      minimumHarvestAmount: BigNumberish,
      minimumDelay: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    checker(overrides?: CallOverrides): Promise<BigNumber>;

    harvestJobs(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    paused(overrides?: CallOverrides): Promise<BigNumber>;

    recoverFunds(
      token: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    removeHarvestJob(
      yieldToken: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setActive(
      yieldToken: string,
      active: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setAlchemist(
      yieldToken: string,
      alchemist: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setMinimumDelay(
      yieldToken: string,
      minimumDelay: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setMinimumHarvestAmount(
      yieldToken: string,
      minimumHarvestAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setPause(
      pauseState: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    yieldTokens(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    addHarvestJob(
      active: boolean,
      yieldToken: string,
      alchemist: string,
      minimumHarvestAmount: BigNumberish,
      minimumDelay: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    checker(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    harvestJobs(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    paused(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    recoverFunds(
      token: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    removeHarvestJob(
      yieldToken: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setActive(
      yieldToken: string,
      active: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setAlchemist(
      yieldToken: string,
      alchemist: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setMinimumDelay(
      yieldToken: string,
      minimumDelay: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setMinimumHarvestAmount(
      yieldToken: string,
      minimumHarvestAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setPause(
      pauseState: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    yieldTokens(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
