/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface IWhitelistsInterface extends ethers.utils.Interface {
  functions: {
    "addToWhitelist(address,address)": FunctionFragment;
    "checkWhitelist(address,address)": FunctionFragment;
    "disableWhitelist(address)": FunctionFragment;
    "getAddresses(address)": FunctionFragment;
    "isWhitelistDisabled(address)": FunctionFragment;
    "removeFromWhitelist(address,address)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "addToWhitelist",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "checkWhitelist",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "disableWhitelist",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getAddresses",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "isWhitelistDisabled",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "removeFromWhitelist",
    values: [string, string]
  ): string;

  decodeFunctionResult(
    functionFragment: "addToWhitelist",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "checkWhitelist",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "disableWhitelist",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAddresses",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isWhitelistDisabled",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeFromWhitelist",
    data: BytesLike
  ): Result;

  events: {
    "AccountAdded(address,address)": EventFragment;
    "AccountRemoved(address,address)": EventFragment;
    "WhitelistDisabled(address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AccountAdded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "AccountRemoved"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "WhitelistDisabled"): EventFragment;
}

export type AccountAddedEvent = TypedEvent<
  [string, string] & { whitelistedContract: string; account: string }
>;

export type AccountRemovedEvent = TypedEvent<
  [string, string] & { whitelistedContract: string; account: string }
>;

export type WhitelistDisabledEvent = TypedEvent<
  [string] & { whitelistedContract: string }
>;

export class IWhitelists extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: IWhitelistsInterface;

  functions: {
    addToWhitelist(
      whitelistedContract: string,
      caller: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    checkWhitelist(
      whitelistedContract: string,
      account: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    disableWhitelist(
      whitelistedContract: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getAddresses(
      whitelistedContract: string,
      overrides?: CallOverrides
    ): Promise<[string[]] & { addresses: string[] }>;

    isWhitelistDisabled(
      whitelistedContract: string,
      overrides?: CallOverrides
    ): Promise<[boolean] & { disabled: boolean }>;

    removeFromWhitelist(
      whitelistedContract: string,
      caller: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  addToWhitelist(
    whitelistedContract: string,
    caller: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  checkWhitelist(
    whitelistedContract: string,
    account: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  disableWhitelist(
    whitelistedContract: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getAddresses(
    whitelistedContract: string,
    overrides?: CallOverrides
  ): Promise<string[]>;

  isWhitelistDisabled(
    whitelistedContract: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  removeFromWhitelist(
    whitelistedContract: string,
    caller: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    addToWhitelist(
      whitelistedContract: string,
      caller: string,
      overrides?: CallOverrides
    ): Promise<void>;

    checkWhitelist(
      whitelistedContract: string,
      account: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    disableWhitelist(
      whitelistedContract: string,
      overrides?: CallOverrides
    ): Promise<void>;

    getAddresses(
      whitelistedContract: string,
      overrides?: CallOverrides
    ): Promise<string[]>;

    isWhitelistDisabled(
      whitelistedContract: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    removeFromWhitelist(
      whitelistedContract: string,
      caller: string,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "AccountAdded(address,address)"(
      whitelistedContract?: null,
      account?: null
    ): TypedEventFilter<
      [string, string],
      { whitelistedContract: string; account: string }
    >;

    AccountAdded(
      whitelistedContract?: null,
      account?: null
    ): TypedEventFilter<
      [string, string],
      { whitelistedContract: string; account: string }
    >;

    "AccountRemoved(address,address)"(
      whitelistedContract?: null,
      account?: null
    ): TypedEventFilter<
      [string, string],
      { whitelistedContract: string; account: string }
    >;

    AccountRemoved(
      whitelistedContract?: null,
      account?: null
    ): TypedEventFilter<
      [string, string],
      { whitelistedContract: string; account: string }
    >;

    "WhitelistDisabled(address)"(
      whitelistedContract?: null
    ): TypedEventFilter<[string], { whitelistedContract: string }>;

    WhitelistDisabled(
      whitelistedContract?: null
    ): TypedEventFilter<[string], { whitelistedContract: string }>;
  };

  estimateGas: {
    addToWhitelist(
      whitelistedContract: string,
      caller: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    checkWhitelist(
      whitelistedContract: string,
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    disableWhitelist(
      whitelistedContract: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getAddresses(
      whitelistedContract: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isWhitelistDisabled(
      whitelistedContract: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    removeFromWhitelist(
      whitelistedContract: string,
      caller: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    addToWhitelist(
      whitelistedContract: string,
      caller: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    checkWhitelist(
      whitelistedContract: string,
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    disableWhitelist(
      whitelistedContract: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getAddresses(
      whitelistedContract: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isWhitelistDisabled(
      whitelistedContract: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    removeFromWhitelist(
      whitelistedContract: string,
      caller: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
