/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface IAlchemistV2AdminActionsInterface extends ethers.utils.Interface {
  functions: {
    "acceptAdmin()": FunctionFragment;
    "addUnderlyingToken(address,(uint256,uint256,uint256,uint256,uint256,uint256))": FunctionFragment;
    "addYieldToken(address,(address,uint256,uint256,uint256))": FunctionFragment;
    "configureCreditUnlockRate(address,uint256)": FunctionFragment;
    "configureLiquidationLimit(address,uint256,uint256)": FunctionFragment;
    "configureMintingLimit(uint256,uint256)": FunctionFragment;
    "configureRepayLimit(address,uint256,uint256)": FunctionFragment;
    "initialize((address,address,address,uint256,uint256,address,uint256,uint256,uint256,address))": FunctionFragment;
    "setKeeper(address,bool)": FunctionFragment;
    "setMaximumExpectedValue(address,uint256)": FunctionFragment;
    "setMaximumLoss(address,uint256)": FunctionFragment;
    "setMinimumCollateralization(uint256)": FunctionFragment;
    "setPendingAdmin(address)": FunctionFragment;
    "setProtocolFee(uint256)": FunctionFragment;
    "setProtocolFeeReceiver(address)": FunctionFragment;
    "setSentinel(address,bool)": FunctionFragment;
    "setTokenAdapter(address,address)": FunctionFragment;
    "setTransmuter(address)": FunctionFragment;
    "setUnderlyingTokenEnabled(address,bool)": FunctionFragment;
    "setYieldTokenEnabled(address,bool)": FunctionFragment;
    "snap(address)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "acceptAdmin",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "addUnderlyingToken",
    values: [
      string,
      {
        repayLimitMinimum: BigNumberish;
        repayLimitMaximum: BigNumberish;
        repayLimitBlocks: BigNumberish;
        liquidationLimitMinimum: BigNumberish;
        liquidationLimitMaximum: BigNumberish;
        liquidationLimitBlocks: BigNumberish;
      }
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "addYieldToken",
    values: [
      string,
      {
        adapter: string;
        maximumLoss: BigNumberish;
        maximumExpectedValue: BigNumberish;
        creditUnlockBlocks: BigNumberish;
      }
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "configureCreditUnlockRate",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "configureLiquidationLimit",
    values: [string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "configureMintingLimit",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "configureRepayLimit",
    values: [string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [
      {
        admin: string;
        debtToken: string;
        transmuter: string;
        minimumCollateralization: BigNumberish;
        protocolFee: BigNumberish;
        protocolFeeReceiver: string;
        mintingLimitMinimum: BigNumberish;
        mintingLimitMaximum: BigNumberish;
        mintingLimitBlocks: BigNumberish;
        whitelist: string;
      }
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "setKeeper",
    values: [string, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setMaximumExpectedValue",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setMaximumLoss",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setMinimumCollateralization",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setPendingAdmin",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setProtocolFee",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setProtocolFeeReceiver",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setSentinel",
    values: [string, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setTokenAdapter",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "setTransmuter",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setUnderlyingTokenEnabled",
    values: [string, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setYieldTokenEnabled",
    values: [string, boolean]
  ): string;
  encodeFunctionData(functionFragment: "snap", values: [string]): string;

  decodeFunctionResult(
    functionFragment: "acceptAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addUnderlyingToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addYieldToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "configureCreditUnlockRate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "configureLiquidationLimit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "configureMintingLimit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "configureRepayLimit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setKeeper", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setMaximumExpectedValue",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMaximumLoss",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMinimumCollateralization",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setPendingAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setProtocolFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setProtocolFeeReceiver",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setSentinel",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setTokenAdapter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setTransmuter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setUnderlyingTokenEnabled",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setYieldTokenEnabled",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "snap", data: BytesLike): Result;

  events: {};
}

export class IAlchemistV2AdminActions extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: IAlchemistV2AdminActionsInterface;

  functions: {
    acceptAdmin(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    addUnderlyingToken(
      underlyingToken: string,
      config: {
        repayLimitMinimum: BigNumberish;
        repayLimitMaximum: BigNumberish;
        repayLimitBlocks: BigNumberish;
        liquidationLimitMinimum: BigNumberish;
        liquidationLimitMaximum: BigNumberish;
        liquidationLimitBlocks: BigNumberish;
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    addYieldToken(
      yieldToken: string,
      config: {
        adapter: string;
        maximumLoss: BigNumberish;
        maximumExpectedValue: BigNumberish;
        creditUnlockBlocks: BigNumberish;
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    configureCreditUnlockRate(
      yieldToken: string,
      blocks: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    configureLiquidationLimit(
      underlyingToken: string,
      maximum: BigNumberish,
      blocks: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    configureMintingLimit(
      maximum: BigNumberish,
      blocks: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    configureRepayLimit(
      underlyingToken: string,
      maximum: BigNumberish,
      blocks: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    initialize(
      params: {
        admin: string;
        debtToken: string;
        transmuter: string;
        minimumCollateralization: BigNumberish;
        protocolFee: BigNumberish;
        protocolFeeReceiver: string;
        mintingLimitMinimum: BigNumberish;
        mintingLimitMaximum: BigNumberish;
        mintingLimitBlocks: BigNumberish;
        whitelist: string;
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setKeeper(
      keeper: string,
      flag: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setMaximumExpectedValue(
      yieldToken: string,
      value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setMaximumLoss(
      yieldToken: string,
      value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setMinimumCollateralization(
      value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setPendingAdmin(
      value: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setProtocolFee(
      value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setProtocolFeeReceiver(
      value: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setSentinel(
      sentinel: string,
      flag: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setTokenAdapter(
      yieldToken: string,
      adapter: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setTransmuter(
      value: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setUnderlyingTokenEnabled(
      underlyingToken: string,
      enabled: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setYieldTokenEnabled(
      yieldToken: string,
      enabled: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    snap(
      yieldToken: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  acceptAdmin(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  addUnderlyingToken(
    underlyingToken: string,
    config: {
      repayLimitMinimum: BigNumberish;
      repayLimitMaximum: BigNumberish;
      repayLimitBlocks: BigNumberish;
      liquidationLimitMinimum: BigNumberish;
      liquidationLimitMaximum: BigNumberish;
      liquidationLimitBlocks: BigNumberish;
    },
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  addYieldToken(
    yieldToken: string,
    config: {
      adapter: string;
      maximumLoss: BigNumberish;
      maximumExpectedValue: BigNumberish;
      creditUnlockBlocks: BigNumberish;
    },
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  configureCreditUnlockRate(
    yieldToken: string,
    blocks: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  configureLiquidationLimit(
    underlyingToken: string,
    maximum: BigNumberish,
    blocks: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  configureMintingLimit(
    maximum: BigNumberish,
    blocks: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  configureRepayLimit(
    underlyingToken: string,
    maximum: BigNumberish,
    blocks: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  initialize(
    params: {
      admin: string;
      debtToken: string;
      transmuter: string;
      minimumCollateralization: BigNumberish;
      protocolFee: BigNumberish;
      protocolFeeReceiver: string;
      mintingLimitMinimum: BigNumberish;
      mintingLimitMaximum: BigNumberish;
      mintingLimitBlocks: BigNumberish;
      whitelist: string;
    },
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setKeeper(
    keeper: string,
    flag: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setMaximumExpectedValue(
    yieldToken: string,
    value: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setMaximumLoss(
    yieldToken: string,
    value: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setMinimumCollateralization(
    value: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setPendingAdmin(
    value: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setProtocolFee(
    value: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setProtocolFeeReceiver(
    value: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setSentinel(
    sentinel: string,
    flag: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setTokenAdapter(
    yieldToken: string,
    adapter: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setTransmuter(
    value: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setUnderlyingTokenEnabled(
    underlyingToken: string,
    enabled: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setYieldTokenEnabled(
    yieldToken: string,
    enabled: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  snap(
    yieldToken: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    acceptAdmin(overrides?: CallOverrides): Promise<void>;

    addUnderlyingToken(
      underlyingToken: string,
      config: {
        repayLimitMinimum: BigNumberish;
        repayLimitMaximum: BigNumberish;
        repayLimitBlocks: BigNumberish;
        liquidationLimitMinimum: BigNumberish;
        liquidationLimitMaximum: BigNumberish;
        liquidationLimitBlocks: BigNumberish;
      },
      overrides?: CallOverrides
    ): Promise<void>;

    addYieldToken(
      yieldToken: string,
      config: {
        adapter: string;
        maximumLoss: BigNumberish;
        maximumExpectedValue: BigNumberish;
        creditUnlockBlocks: BigNumberish;
      },
      overrides?: CallOverrides
    ): Promise<void>;

    configureCreditUnlockRate(
      yieldToken: string,
      blocks: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    configureLiquidationLimit(
      underlyingToken: string,
      maximum: BigNumberish,
      blocks: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    configureMintingLimit(
      maximum: BigNumberish,
      blocks: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    configureRepayLimit(
      underlyingToken: string,
      maximum: BigNumberish,
      blocks: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    initialize(
      params: {
        admin: string;
        debtToken: string;
        transmuter: string;
        minimumCollateralization: BigNumberish;
        protocolFee: BigNumberish;
        protocolFeeReceiver: string;
        mintingLimitMinimum: BigNumberish;
        mintingLimitMaximum: BigNumberish;
        mintingLimitBlocks: BigNumberish;
        whitelist: string;
      },
      overrides?: CallOverrides
    ): Promise<void>;

    setKeeper(
      keeper: string,
      flag: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    setMaximumExpectedValue(
      yieldToken: string,
      value: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setMaximumLoss(
      yieldToken: string,
      value: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setMinimumCollateralization(
      value: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setPendingAdmin(value: string, overrides?: CallOverrides): Promise<void>;

    setProtocolFee(
      value: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setProtocolFeeReceiver(
      value: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setSentinel(
      sentinel: string,
      flag: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    setTokenAdapter(
      yieldToken: string,
      adapter: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setTransmuter(value: string, overrides?: CallOverrides): Promise<void>;

    setUnderlyingTokenEnabled(
      underlyingToken: string,
      enabled: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    setYieldTokenEnabled(
      yieldToken: string,
      enabled: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    snap(yieldToken: string, overrides?: CallOverrides): Promise<void>;
  };

  filters: {};

  estimateGas: {
    acceptAdmin(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    addUnderlyingToken(
      underlyingToken: string,
      config: {
        repayLimitMinimum: BigNumberish;
        repayLimitMaximum: BigNumberish;
        repayLimitBlocks: BigNumberish;
        liquidationLimitMinimum: BigNumberish;
        liquidationLimitMaximum: BigNumberish;
        liquidationLimitBlocks: BigNumberish;
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    addYieldToken(
      yieldToken: string,
      config: {
        adapter: string;
        maximumLoss: BigNumberish;
        maximumExpectedValue: BigNumberish;
        creditUnlockBlocks: BigNumberish;
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    configureCreditUnlockRate(
      yieldToken: string,
      blocks: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    configureLiquidationLimit(
      underlyingToken: string,
      maximum: BigNumberish,
      blocks: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    configureMintingLimit(
      maximum: BigNumberish,
      blocks: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    configureRepayLimit(
      underlyingToken: string,
      maximum: BigNumberish,
      blocks: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    initialize(
      params: {
        admin: string;
        debtToken: string;
        transmuter: string;
        minimumCollateralization: BigNumberish;
        protocolFee: BigNumberish;
        protocolFeeReceiver: string;
        mintingLimitMinimum: BigNumberish;
        mintingLimitMaximum: BigNumberish;
        mintingLimitBlocks: BigNumberish;
        whitelist: string;
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setKeeper(
      keeper: string,
      flag: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setMaximumExpectedValue(
      yieldToken: string,
      value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setMaximumLoss(
      yieldToken: string,
      value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setMinimumCollateralization(
      value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setPendingAdmin(
      value: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setProtocolFee(
      value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setProtocolFeeReceiver(
      value: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setSentinel(
      sentinel: string,
      flag: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setTokenAdapter(
      yieldToken: string,
      adapter: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setTransmuter(
      value: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setUnderlyingTokenEnabled(
      underlyingToken: string,
      enabled: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setYieldTokenEnabled(
      yieldToken: string,
      enabled: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    snap(
      yieldToken: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    acceptAdmin(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    addUnderlyingToken(
      underlyingToken: string,
      config: {
        repayLimitMinimum: BigNumberish;
        repayLimitMaximum: BigNumberish;
        repayLimitBlocks: BigNumberish;
        liquidationLimitMinimum: BigNumberish;
        liquidationLimitMaximum: BigNumberish;
        liquidationLimitBlocks: BigNumberish;
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    addYieldToken(
      yieldToken: string,
      config: {
        adapter: string;
        maximumLoss: BigNumberish;
        maximumExpectedValue: BigNumberish;
        creditUnlockBlocks: BigNumberish;
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    configureCreditUnlockRate(
      yieldToken: string,
      blocks: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    configureLiquidationLimit(
      underlyingToken: string,
      maximum: BigNumberish,
      blocks: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    configureMintingLimit(
      maximum: BigNumberish,
      blocks: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    configureRepayLimit(
      underlyingToken: string,
      maximum: BigNumberish,
      blocks: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    initialize(
      params: {
        admin: string;
        debtToken: string;
        transmuter: string;
        minimumCollateralization: BigNumberish;
        protocolFee: BigNumberish;
        protocolFeeReceiver: string;
        mintingLimitMinimum: BigNumberish;
        mintingLimitMaximum: BigNumberish;
        mintingLimitBlocks: BigNumberish;
        whitelist: string;
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setKeeper(
      keeper: string,
      flag: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setMaximumExpectedValue(
      yieldToken: string,
      value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setMaximumLoss(
      yieldToken: string,
      value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setMinimumCollateralization(
      value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setPendingAdmin(
      value: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setProtocolFee(
      value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setProtocolFeeReceiver(
      value: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setSentinel(
      sentinel: string,
      flag: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setTokenAdapter(
      yieldToken: string,
      adapter: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setTransmuter(
      value: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setUnderlyingTokenEnabled(
      underlyingToken: string,
      enabled: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setYieldTokenEnabled(
      yieldToken: string,
      enabled: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    snap(
      yieldToken: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
